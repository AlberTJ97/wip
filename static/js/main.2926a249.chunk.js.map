{"version":3,"sources":["lib/grid/gridProperties.js","components/InteractiveGrid/Grid/Grid.js","components/DeleteButton/index.js","components/InteractiveGrid/Item/Item.js","components/InteractiveGrid/index.js","lib/RgbaImageBuffer/index.js","lib/coordinates.js","components/ImageComponent/index.js","components/HistogramComponent/index.js","components/HistogramAndInfoComponent/index.js","lib/Exceptions/ImageLoadException.js","lib/Exceptions/ValueOutOfBoundsException.js","lib/Exceptions/ImageOperationException.js","lib/imageHelper.js","components/ImageProcessingUi/LoadImageMenuItem.js","components/ImageProcessingUi/DownloadSelectedImageMenuItem.js","components/Toolbar/Submenus/FileSubmenu.js","components/ImageProcessingUi/ShowHistogramMenuItem.js","lib/ImageProcessing/crop.js","components/ImageProcessingUi/CropMenuItem.js","lib/Bresenham.js","components/ImageProcessingUi/ProfileMenuItem.js","components/Toolbar/Submenus/ImageSubmenu.js","components/ImageProcessingUi/LinearTransformationMenuItem/LinearTransformationDialog/InputCoordinate.js","lib/ImageProcessing/transformImage.js","lib/ImageProcessing/linearTransformation.js","components/ImageProcessingUi/LinearTransformationMenuItem/LinearTransformationDialog/index.js","components/ImageProcessingUi/LinearTransformationMenuItem/index.js","lib/Checks.js","lib/ImageProcessing/brightnessAndContrastAdjustment.js","components/ImageProcessingUi/BrightnessAndContrastMenuItem/BrightnessAndContrastDialog.js","components/ImageProcessingUi/BrightnessAndContrastMenuItem/index.js","lib/ImageProcessing/gammaCorrection.js","components/ImageProcessingUi/GammaCorrectionMenuItem/GammaCorrectionDialog.js","components/ImageProcessingUi/GammaCorrectionMenuItem/index.js","components/Toolbar/FilesListMenu.js","lib/ImageProcessing/imagesDifference.js","components/ImageProcessingUi/ImageDifferenceMenuItem/ImageDifferenceDialog.js","components/ImageProcessingUi/ImageDifferenceMenuItem/index.js","lib/ImageProcessing/changesDetection.js","components/ImageProcessingUi/ChangesDetectionMenuItem/ChangesDetectionDialog.js","components/ImageProcessingUi/ChangesDetectionMenuItem/index.js","lib/ImageProcessing/histogramSpecification.js","components/ImageProcessingUi/HistogramSpecificationMenuItem/HistogramSpecificationDialog.js","components/ImageProcessingUi/HistogramSpecificationMenuItem/index.js","lib/ImageProcessing/grayscale.js","components/ImageProcessingUi/GrayscaleMenuItem.js","lib/ImageProcessing/histogramEqualization.js","components/ImageProcessingUi/HistogramEqualizationMenuItem.js","lib/ImageProcessing/quantization.js","components/ImageProcessingUi/QuantizationMenuItem/QuantizationDialog.js","components/ImageProcessingUi/QuantizationMenuItem/index.js","components/Toolbar/Submenus/PointOperationsSubmenu.js","lib/ImageProcessing/imageRotation.js","components/ImageProcessingUi/ImageRotationMenuItem/ImageRotationDialog.js","components/ImageProcessingUi/ImageRotationMenuItem/index.js","lib/ImageProcessing/imageResizing.js","components/ImageProcessingUi/ImageResizeMenuItem/ImageResizingDialog.js","components/ImageProcessingUi/ImageResizeMenuItem/index.js","lib/ImageProcessing/mirrorOperations.js","components/ImageProcessingUi/VerticalMirrorMenuItem.js","components/ImageProcessingUi/HorizontalMirrorMenuItem.js","lib/ImageProcessing/imageTranspose.js","components/ImageProcessingUi/ImageTransposeMenuItem.js","lib/ImageProcessing/imageResampling.js","components/ImageProcessingUi/ImageResampleMenuItem/ImageResampleDialog.js","components/ImageProcessingUi/ImageResampleMenuItem/index.js","components/Toolbar/Submenus/GeometricOperationsSubmenu.js","components/Toolbar/SelectionToolbar.js","components/Toolbar/index.js","components/Overlays/SelectionOverlay.js","components/Overlays/LineOverlay.js","components/ProfileComponent/index.js","components/ProfilesComponent/index.js","components/App/index.js","lib/Histogram.js","lib/CumulativeHistogram.js","lib/grid/calculateLayout.js","stores/appStore.js","index.js","lib/ImageProcessing/interpolationMethods.js"],"names":["gridProperties","GRID_COLUMNS","lg","md","sm","xs","xxs","LAYOUT_BREAKPOINTS","DEFAULT_GRID_ITEM_COLS","DEFAULT_GRID_ITEM_ROWS","GRID_ITEM_ROW_HEIGHT","ResponsiveGrid","WidthProvider","Responsive","Grid","_ref","children","props","Object","objectWithoutProperties","react_default","a","createElement","assign","cols","GRID_PROPERTIES","breakpoints","rowHeight","defaultProps","objectSpread","layouts","DeleteButton","onDelete","className","onClick","disabled","aria-label","stopEvent","event","preventDefault","stopPropagation","Item","state","isDraggable","onDragHandleMouseDown","_this","setState","onDragHandleMouseUp","onDragStart","onMouseDown","onDragEnd","onMouseUp","id","onSelect","document","addEventListener","this","removeEventListener","_this$props","style","name","isSelected","concat","draggable","onFocus","tabIndex","components_DeleteButton","React","Component","onDeselect","InteractiveGrid","RgbaImageBuffer","width","height","pixels","classCallCheck","toImageData","copy","Uint8ClampedArray","getPixel","_ref3","x","y","Math","max","min","pixelPosition","_mapMatrixPositionToArray","NUM_CHANNELS","_width","_height","_pixels","data","_ref2","imgData","ImageData","set","mapToCoordinatesRelativeToElement","coords","parentElement","parentElementBoundingBox","top","left","clientX","ceil","clientY","mapToRelativeCoordinates","getBoundingClientRect","calculateRect","coords1","coords2","right","bottom","ImageComponent","isImageLoading","isMouseDown","mouseDownOriginCoordinates","currentMouseCoordinates","onMouseMove","mouseEvent","coordinates","Coordinates","refs","canvas","pixel","rgbaImage","_this$state","_this$props$rgbaImage","onSelection","mouseDownCoords","mouseUpCoords","context","getContext","putImageData","_this$state2","position","ref","display","backgroundColor","maxHeight","originCoords","endCoords","HistogramComponent","emphasizedValue","histogramVisualizationData","histogram","map","value","index","x0","_this2","es","margin","onMouseLeave","onNearestX","align","horizontal","vertical","fontSize","format","dataPoint","title","HistogramAndInfoComponent","currentTab","updateCurrentTab","_","newTab","_this$props$histogram","histogramValues","histogramInfo","counts","cHistogram","Fragment","justifyContent","Button_default","boxShadow","e","alignItems","components_HistogramComponent","maxWidth","Table_default","TableHead_default","TableRow_default","TableCell_default","numeric","TableBody_default","count","mean","toFixed","stdDev","minValue","maxValue","mode","entropy","ImageLoadException","Error","errorImageSrc","possibleConstructorReturn","getPrototypeOf","call","src","ImageOperationException","exceptionName","message","loadFromObject","obj","URL","createObjectURL","image","Image","Promise","resolve","reject","onload","onerror","load","finally","revokeObjectURL","LoadImageMenuItem","onImageFileInputted","enqueueSnackbar","appStore","files","target","length","ImageHelper","then","naturalWidth","naturalHeight","drawImage","getImageData","imageBuffer","fromImageData","addImage","fileInputForm","reset","catch","variant","htmlFor","MenuItem_default","hidden","type","accept","onChange","withSnackbar","inject","observer","DownloadSelectedImageMenuItem","downloadCurrentImage","_appStore$selectedGri","selectedGridItem","imgInfo","imagesInfos","_imgInfo$region","region","imageData","toBlob","blob","imgUrl","downloadAnchor","href","click","download","FileSubmenu","open","handleToggle","handleClose","anchorEl","contains","buttonRef","node","aria-owns","undefined","aria-haspopup","color","Popper_default","transition","disablePortal","Paper_default","ClickAwayListener_default","onClickAway","MenuList_default","ImageProcessingUi_LoadImageMenuItem","ImageProcessingUi_DownloadSelectedImageMenuItem","ShowHistogramMenuItem","showHistogramOfCurrentImage","crop","imgBuffer","arguments","_ref$top","_ref$left","_ref$height","_ref$width","resultPixels","currentIndex","yOffset","xOffset","CropMenuItem","cropCurrentImage","imageSelectionMehod","bresenham","firstPoint","secondPoint","points","x1","y0","y1","dx","abs","dy","sx","sy","err","push","e2","ProfileMenuItem","getProfile","_appStore$imagesInfos","associatedImage","profileValues","point","firstDerivativeProfileValues","i","addProfile","ImageSubmenu","ImageProcessingUi_ShowHistogramMenuItem","ImageProcessingUi_CropMenuItem","ImageProcessingUi_ProfileMenuItem","InputCoordinate","onYChange","number","Number","parseFloat","coordinate","isFinite","onXChange","TextField_default","placeholder","InputProps","startAdornment","InputAdornment_default","IconButton_default","Delete_default","transformImage","lookupTable","result","newValue","linearTransformation","sections","newSection","slope","currentSectionIndex","frontier","round","yIntercept","styles","center","marginTop","marginBottom","LinearTransformationDialog","onDataChange","newCoords","prevState","coord","onDataDelete","filter","addNewCoordinate","newCoord","slice","toConsumableArray","onSubmit","onClose","Dialog_default","isOpen","scroll","aria-labelledby","DialogTitle_default","DialogContent_default","DialogContentText_default","xDomain","yDomain","fullWidth","InputCoordinate_InputCoordinate","key","DialogActions_default","LinearTransformationMenuItem","isDialogOpen","openDialog","closeDialog","LinearTransformationMenuItem_LinearTransformationDialog","isInRange","brightnessAndContrastAdjustment","oldBrightness","oldContrast","newBrightness","newContrast","A","B","inputsContainer","flexWrap","input","BrightnessAndContrastDialog","brightness","brightnessErrorMessage","contrast","contrastErrorMessage","formChanged","valueStateName","errorMessageStateName","minPossibleValue","maxPossibleValue","_this$setState2","_this$setState","defineProperty","onBrightnessChange","onContrastChange","histogramInfos","error","label","String","_props$appStore","BrightnessAndContrastMenuItem","BrightnessAndContrastMenuItem_BrightnessAndContrastDialog","gammaCorrection","gammaValue","pow","GammaCorrectionDialog","gamma","gammaErrorMessage","errorMessage","POSITIVE_INFINITY","onGammaChange","GammaCorrectionMenuItem","GammaCorrectionMenuItem_GammaCorrectionDialog","FilesListMenu","selectedIndex","selectedItemIndex","handleClickListItem","currentTarget","handleMenuItemClick","selectedItemName","onItemSelection","classes","root","List_default","component","ListItem_default","isDisabled","button","menuTitle","ListItemText_default","primary","secondary","options","Menu_default","Boolean","option","selected","withStyles","theme","palette","background","paper","imagesDifference","firstImgBuffer","secondImgBuffer","ImageDifferenceDialog","imgName","otherImgName","otherImageInfo","find","activeImagesNames","img","Toolbar_FilesListMenu","ImageDifferenceMenuItem","ImageDifferenceMenuItem_ImageDifferenceDialog","changesDetection","threshold","changeHighlightColor","difference","r","g","b","ChangesDetectionDialog","rgbaColor","onImgNameChange","onThresholdChange","handleChangeComplete","rgb","applyChangesDetection","lib","onChangeComplete","ChangesDetectionMenuItem","ChangesDetectionMenuItem_ChangesDetectionDialog","histogramSpecification","originImageCHistogram","targetImageCHistogram","normalizedOriginImageCHistogram","normalizedTargetImageCHistogram","j","HistogramSpecificationDialog","otherImgIndex","findIndex","HistogramSpecificationMenuItem","HistogramSpecificationMenuItem_HistogramSpecificationDialog","imageToGrayscale","grayscaleStrategy","pixelToGrayscalePal","grayValue","rComponent","gComponent","bComponent","GrayscaleMenuItem","currentImageToGrayscale","_this$props$appStore$","histogramEqualization","imageCHistogram","equalizationLevel","HistogramEqualizationMenuItem","currentImageHistogramEqualization","quantization","amountOfLevels","isInteger","newValues","part","distance","minDistance","QuantizationDialog","levels","onLevelsChange","QuantizationMenuItem","QuantizationMenuItem_QuantizationDialog","PointOperationsSubmenu","ImageProcessingUi_GrayscaleMenuItem","ImageProcessingUi_LinearTransformationMenuItem","ImageProcessingUi_BrightnessAndContrastMenuItem","ImageProcessingUi_GammaCorrectionMenuItem","ImageProcessingUi_ImageDifferenceMenuItem","ImageProcessingUi_ChangesDetectionMenuItem","ImageProcessingUi_HistogramSpecificationMenuItem","ImageProcessingUi_HistogramEqualizationMenuItem","ImageProcessingUi_QuantizationMenuItem","imageRotation","degrees","interpolationMethod","rotateAndPaintRotation","radians","PI","directTransformation","xCoord","yCoord","cos","sin","newImageInfo","getRotatedImageInfo","rotateAndPaint","transformedCoords","minXCoord","minYCoord","originalImagePixel","upperLeftCornerRotated","lowerLeftCornerRotated","upperRightCornerRotated","lowerRightCornerRotated","maxXCoord","maxYCoord","floor","ImageRotationDialog","degreesErrorMessage","interpolationMethods","selectedInterpolationMethodIndex","onDegreesChange","onRotateAndPaintChange","checked","onInterpolationMethodChange","FormControlLabel_default","control","Checkbox_default","ImageRotationMenuItem","rotateCurrentImage","InterpolationMethods","ImageRotationDialog_ImageRotationDialog","rotationInfo","keys","imageResizing","widthPercentage","heighPercentage","oldWidth","oldHeight","widthFactor","heightFactor","newWidth","newHeight","ImageResizingDialog","widthErrorMessage","heightPercentage","heightErrorMessage","onDimensionsChange","dimensionName","dimensionStateName","oldDimensionPropName","percentageStateName","isPercentage","dimension","percentage","isNaN","onWidthChange","onHeightChange","onWidthPercentageChange","onHeightPercentageChange","endAdornment","ImageResizeMenuItem","resizeCurrentImage","_appStore$selectedGri2","selectedImageDimensions","ImageResizingDialog_ImageResizingDialog","resizeInfo","horizontalMirror","verticalMirror","VerticalMirrorMenuItem","currentImageVerticalMirror","HorizontalMirrorMenuItem","currentImageHorizontalMirror","imageTranspose","ImageTransposeMenuItem","transposeImage","imageResampling","blockWidth","blockHeight","initialX","initialY","resampleBlock","xLimit","yLimit","sum","ImageResampleDialog","blockWidthErrorMessage","blockHeightErrorMessage","onBlockWidthChange","onBlockHeightChange","ImageResampleMenuItem","ImageResampleMenuItem_ImageResampleDialog","GeometricOperationsSubmenu","ImageProcessingUi_ImageRotationMenuItem","ImageProcessingUi_ImageResizeMenuItem","ImageProcessingUi_VerticalMirrorMenuItem","ImageProcessingUi_HorizontalMirrorMenuItem","ImageProcessingUi_ImageTransposeMenuItem","ImageProcessingUi_ImageResampleMenuItem","SelectionToolbar","_this$props$appStore","updateImageSelectionMehod","Toolbar_default","zIndex","CropSquare_default","marginRight","Edit_default","AppToolbar","AppBar_default","FileSubmenu_FileSubmenu","ImageSubmenu_ImageSubmenu","PointOperationsSubmenu_PointOperationsSubmenu","GeometricOperationsSubmenu_GeometricOperationsSubmenu","Toolbar_SelectionToolbar","SelectionOverlay","border","opacity","LineOverlay","xmlns","stroke","strokeWidth","x2","y2","ProfileComponent","profileVisualizationData","ProfilesComponent","_this$props$info","info","components_ProfileComponent","App","onMouseMoveOverImage","pixelCoords","pixelValue","setCurrentPixel","onImageRegionSelection","_calculateRect","newRegion","updateImageRegion","getImageOverlay","Overlays_SelectionOverlay","Overlays_LineOverlay","components_Toolbar","getGridComponent","getDisplayForImageDimensions","getDisplayForPixelUnderMouse","gridLayouts","onLayoutChange","updateLayout","getImageGridItem","visible","getHistogramGridItem","element","profilesInfos","profile","getProfileGridItem","_this3","_ref4","removeImageInfo","updateSelectedImageItem","isGridItemSelected","components_ImageComponent","_this4","_ref5","hideHistogram","updateSelectedHistogramItem","HistogramAndInfoComponent_HistogramAndInfoComponent","profileInfo","_this5","removeProfile","updateSelectedProfileItem","ProfilesComponent_ProfilesComponent","currentPixelRgbaValue","join","sizeText","padding","borderRadius","_this$props$appStore2","Histogram","imagePixels","setImagePixels","Array","fill","reduce","previousValue","currentElement","sqrt","maxIndex","maxCount","forEach","probability","log2","CumulativeHistogram","createNewSetOfLayouts","layoutName","createNewElementLayoutInfo","Infinity","w","h","minW","minH","addNewElementsToLayouts","currentLayouts","newElementsIds","newElementsLayoutInfos","newLayouts","removeElementsFromLayout","ids","includes","AppStoreSingleton","GridLayoutHelper","_removedImagesCount","_profilesCount","imageSection","imageKey","histogramKey","profileKey","firstDerivativeKey","newSelectedItem","_this$selectedGridIte","requestAnimationFrame","newMethodType","decorate","observable","action","stores_appStore","createMuiTheme","common","black","white","default","light","main","dark","contrastText","text","hint","typography","useNextVariants","ReactDOM","render","core_styles","build","maxSnack","anchorOrigin","size","Date","now","index_module","components_App","getElementById","module","exports","Bilinear","C","D","p","q","Closest Neighbour"],"mappings":"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","file":"static/js/main.2926a249.chunk.js","sourcesContent":["/**\n * Object defining the constants properties of the Grids\n */\nexport default {\n  GRID_COLUMNS: { lg: 10, md: 8, sm: 6, xs: 4, xxs: 2 },\n  LAYOUT_BREAKPOINTS: { lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 },\n  DEFAULT_GRID_ITEM_COLS: 2, // Number of columns each item is tall on creation\n  DEFAULT_GRID_ITEM_ROWS: 4, // Number of rows each item is wide on creation\n  GRID_ITEM_ROW_HEIGHT: 50 // Height in number pixels of each row\n};","import React from \"react\";\nimport { WidthProvider, Responsive } from \"react-grid-layout\";\nimport GRID_PROPERTIES from \"../../../lib/grid/gridProperties\";\n\nconst ResponsiveGrid = WidthProvider(Responsive);\n\n/**\n * react-grid-layout responsive grid with some default props given as defined in\n * gridProperties: cols, breakpoints and rowHeight\n */\nconst Grid = ({ children, ...props }) => {\n  return (\n    <ResponsiveGrid\n      cols={GRID_PROPERTIES.GRID_COLUMNS}\n      breakpoints={GRID_PROPERTIES.LAYOUT_BREAKPOINTS}\n      rowHeight={GRID_PROPERTIES.GRID_ITEM_ROW_HEIGHT}\n      {...props}\n    >\n      {children}\n    </ResponsiveGrid>\n  );\n};\n\nGrid.propTypes = ResponsiveGrid.propTypes;\nGrid.defaultProps = { layouts: {}, ...ResponsiveGrid.defaultProps };\n\nexport default Grid;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./DeleteButton.css\";\n\n/**\n * Delete button component. Renders a circular button with a\n * cross to let the user know that they can delete something.\n *\n * The parent component is notified when the user wants to\n * delete via the `onDelete` prop. If `onDelete` is not\n * provided, the button will be rendered as a disabled button\n */\nconst DeleteButton = ({ onDelete, ...props }) => (\n  <button\n    className=\"DeleteButton\"\n    onClick={onDelete}\n    disabled={!onDelete}\n    aria-label=\"delete\"\n    {...props}\n  >\n    ×\n  </button>\n);\n\nDeleteButton.propTypes = {\n  onDelete: PropTypes.func\n};\n\nDeleteButton.defaultProps = {\n  onDelete: null\n};\n\nexport default DeleteButton;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport DeleteButton from \"../../DeleteButton\";\nimport \"./Item.css\";\n\n/** Helper method to prevent the default behaviour and stop the propagation of\n * an event */\nconst stopEvent = event => {\n  event.preventDefault();\n  event.stopPropagation();\n};\n\n/**\n * Grid Item component. Forces grid items to be draggable only by a toolbar at\n * the top and also allows to listen to delete events (renders a delete button\n * and the event fires when the user wants to delete the item). It can also\n * notifiy when the user selects and deselects this component via props\n */\nexport default class Item extends React.Component {\n  /** The rest of the props are provided by the grid */\n  static propTypes = {\n    id: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.symbol,\n      PropTypes.object\n    ]).isRequired,\n    name: PropTypes.string,\n    onDelete: PropTypes.func,\n    onSelect: PropTypes.func,\n    isSelected: PropTypes.bool\n  };\n\n  static defaultProps = {\n    name: \"\",\n    onDelete: null,\n    onSelect: null,\n    onDeselect: null,\n    isSelected: false\n  };\n\n  /** We only want to allow the item being drag when the user is trying to drag\n   * it from a part of the item, a toolbar at the top */\n  state = {\n    isDraggable: false\n  };\n\n  /**\n   * Listen for document mouse up event so we can react to it even if the users\n   * triggers it out of this element\n   */\n  componentDidMount() {\n    document.addEventListener(\"mouseup\", this.onDragHandleMouseUp);\n  }\n\n  /**\n   * Clean the mouse up listener from the document when the component will be\n   * unmounted\n   */\n  componentWillUnmount() {\n    document.removeEventListener(\"mouseup\", this.onDragHandleMouseUp);\n  }\n\n  /** Update the state to allow the item be dragged only when the user is\n   * clicking on the top toolbar */\n  onDragHandleMouseDown = () => this.setState({ isDraggable: true });\n\n  /** Update the state to forbid the item being dragged when the user stops\n   * clicking the top toolbar. This listener is attached to the document so it\n   * works even if the user drags the element out of the viewport and releses\n   * the mouse there */\n  onDragHandleMouseUp = () =>\n    this.state.isDraggable &&\n    this.setState({\n      isDraggable: false\n    });\n\n  /** Listener for the drag start event, but only allow the drag behaviour if\n   * the state says so */\n  onDragStart = event => {\n    if (this.state.isDraggable) {\n      stopEvent(event);\n      this.props.onMouseDown && this.props.onMouseDown(event);\n    }\n  };\n\n  /** Listener for the drag end event */\n  onDragEnd = event => {\n    if (this.state.isDraggable) {\n      stopEvent(event);\n      this.props.onMouseUp && this.props.onMouseUp(event);\n    }\n  };\n\n  /** When the user wants to delete the item, call the props `onDelete` callback\n   * with the ID of this element */\n  onDelete = () => this.props.onDelete(this.props.id);\n\n  /** When the user selects this item, call the props `onSelect` callback with\n   * the ID of this element */\n  onSelect = () => this.props.onSelect(this.props.id);\n\n  render() {\n    const {\n      children,\n      className,\n      style,\n      name,\n      onSelect,\n      onDelete,\n      isSelected\n    } = this.props;\n\n    return (\n      <div\n        className={`Item ${className} ${isSelected && \"is-selected\"}`}\n        style={style}\n        draggable={this.state.isDraggable}\n        onDragStart={this.onDragStart}\n        onMouseUp={this.onDragEnd} // OnMouseUp instead of DragEnd because DragStart prevents default\n        onFocus={onSelect ? this.onSelect : null}\n        tabIndex=\"0\"\n      >\n        <div onMouseDown={this.onDragHandleMouseDown} className=\"Item__toolbar\">\n          <DeleteButton\n            onMouseDown={stopEvent}\n            onDelete={onDelete ? this.onDelete : null}\n          />\n          <span className=\"Item__name\">{name}</span>\n        </div>\n        <div className=\"Item__childrenContainer\">{children}</div>\n      </div>\n    );\n  }\n}\n","import Grid from \"./Grid/Grid\";\nimport Item from \"./Item/Item\";\n\nexport default {\n  Grid,\n  Item\n};\n","// TODO: pollyfill ImageData constructor\n/**\n * Class to represent a RGBA pixel matrix (an image). This class aims to\n * abstract away the pixel related manipulations by providing a set of\n * convenience methods for iterating through pixels.\n */\nexport default class RgbaImageBuffer {\n  /** Number of channels in a RGBA pixel */\n  static NUM_CHANNELS = 4;\n\n  /**\n   * Convenient function to create a RgbaImage instance from an ImageData object\n   * where the width, height are copied but the pixel array is only copied the\n   * references\n   *\n   * @param {ImageData} imgData ImageData instance to create the RgbaImage from\n   * @returns {RgbaImageBuffer} Instance of RgbaImage initialized from the ImgData\n   */\n  static fromImageData({ width, height, data }) {\n    return new RgbaImageBuffer(width, height, data);\n  }\n\n  /**\n   * Convenient function to create an ImageData object from a RgbaImage object\n   *\n   * @param {RgbaImageBuffer} rgbaImage Instance of RgbaImage used to create the\n   * ImageData\n   * @returns {ImageData} ImageData instance with a copy of the width, height\n   * and pixels of the given RgbaImage\n   */\n  static toImageData({ width, height, pixels }) {\n    const imgData = new ImageData(width, height);\n    imgData.data.set(pixels);\n\n    return imgData;\n  }\n\n  /**\n   * Creates an instance of this class. Note: this treats the given pixels as\n   * RGBA pixels\n   *\n   * @param {number} width Pixel matrix width\n   * @param {number} height Pixel matrix height\n   * @param {Uint8ClampedArray} pixels TypedArray of RGBA Pixels\n   */\n  constructor(width, height, pixels) {\n    // TODO: check that everything is right (width, height > 0; width * height *\n    // rgbaDimension = pixels.length; etc)\n    this._width = width;\n    this._height = height;\n    this._pixels = pixels;\n  }\n\n  /** Alias for RgbaImage.toImageData(instanceOfRgbaImage) */\n  toImageData = () => RgbaImageBuffer.toImageData(this);\n\n  /** Returns a deep copy of this RgbaImage instance */\n  copy = () =>\n    new RgbaImageBuffer(\n      this.width,\n      this.height,\n      new Uint8ClampedArray(this.pixels)\n    );\n\n  /**\n   * Returns the pixel value at the given position\n   *\n   * @param {Object} coordinates Matrix coordinates of the pixel to get\n   * @param {number} coordinates.x Horizontal coordinate\n   * @param {number} coordinates.y Vertical coordinate\n   * @returns {Array} Pixel value at the given coordinates (an array with one\n   *  element per pixel dimension, 4 in case of RGBA for example)\n   */\n  getPixel = ({ x, y }) => {\n    x = Math.max(0, Math.min(this.width - 1, x));\n    y = Math.max(0, Math.min(this.height - 1, y));\n\n    const pixelPosition = this._mapMatrixPositionToArray(x, y);\n\n    // We tested this way and it turned to be much more performant than using slice\n    return [\n      this.pixels[pixelPosition],\n      this.pixels[pixelPosition + 1],\n      this.pixels[pixelPosition + 2],\n      this.pixels[pixelPosition + 3]\n    ];\n  };\n\n  /**\n   * @returns {Uint8ClampedArray} Pixels values of the image, an element for\n   * each pixel dimension (4 in case of RGBA for example)\n   */\n  get pixels() {\n    return this._pixels;\n  }\n\n  /** @returns {number} The width of the image */\n  get width() {\n    return this._width;\n  }\n\n  /** @returns {number} The height of the image */\n  get height() {\n    return this._height;\n  }\n\n  /**\n   * Given a coordinate in matrix space (2 dimensions) this method returns the\n   * corresponding coordinate in vector space (1 dimension).\n   *\n   * @param {number} x Horizontal coordinate\n   * @param {number} y Vertical coordinate\n   * @returns {number} Corresponding vector coordinate\n   */\n  _mapMatrixPositionToArray = (x, y) =>\n    (y * this.width + x) * RgbaImageBuffer.NUM_CHANNELS;\n}\n","/**\n * Maps the given coordinates with respect to the viewport to coordinates\n * with respect to the given element\n *\n * @param {Object} coords Coordinates to map to relative coordinates\n * @param {number} coords.clientX Horizontal coordinate with respect to the app viewport\n * @param {number} coords.clientY Vertical coordinate with respect to the app viewport\n * @param {Element} parentElement Element to get the bounding box from to\n * map the given coordinates to be relative to this element\n * @returns {Object} {x, y} Mouse coordinates with respect to the given element\n */\nexport function mapToCoordinatesRelativeToElement(coords, parentElement) {\n  return mapToRelativeCoordinates(\n    coords,\n    parentElement.getBoundingClientRect()\n  );\n}\n\n/**\n * Maps the mouse coordinates from the given mouse event to relative\n * coordinates with respect to the given element bounding box\n *\n * @param {Object} coords Coordinates to map to relative coordinates\n * @param {number} coords.clientX Horizontal coordinate with respect to the app viewport\n * @param {number} coords.clientY Vertical coordinate with respect to the app viewport\n * @param {DOMRectReadOnly} parentElementBoundingBox Bounding box where to\n * map the coordinates to\n * @returns {Object} {x, y} Mouse coordinates with respect the given bounding box\n */\nexport function mapToRelativeCoordinates(coords, parentElementBoundingBox) {\n  const { top, left } = parentElementBoundingBox;\n\n  // Top and left can be real numbers. If, for example, top = 66.19\n  // it means that the top of the element is at 66.19 CSS pixels\n  // from the top of the viewport. However we want to map that\n  // to integer values. The mouse position is relative to the viewport and it is\n  // an integer value. If the element top is at 66.19 CSS pixels from the top of the\n  // viewport then the first integer pixel would be 67. Cannot be 66 because\n  // there aren't element pixels below 66.19. So to consider the top and\n  // left values as integers we have to consider the ceiling.\n\n  return {\n    x: coords.clientX - Math.ceil(left),\n    y: coords.clientY - Math.ceil(top)\n  };\n}\n\n/** Returns an object describing the rectangle enclosed by the 2 given\n * coordinates */\nexport function calculateRect(coords1, coords2) {\n  const left = Math.min(coords1.x, coords2.x);\n  const right = Math.max(coords1.x, coords2.x);\n  const top = Math.min(coords1.y, coords2.y);\n  const bottom = Math.max(coords1.y, coords2.y);\n\n  return { left, right, top, bottom };\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport RgbaImageBuffer from \"../../lib/RgbaImageBuffer\";\nimport * as Coordinates from \"../../lib/coordinates\";\n\n// FIXME: the selection functionality doesn't work well when:\n// - The mouse up event is done outside the component\n// - The user wants to select a part passing the scroll\n/**\n * Component that renders an image from the given RgbaImage instance\n */\nclass ImageComponent extends Component {\n  static propTypes = {\n    /** RgbaImage instance to render */\n    rgbaImage: PropTypes.instanceOf(RgbaImageBuffer).isRequired,\n    /** Callback called with the mouse position relative to the\n     * image and the pixel value at that position */\n    onMouseMove: PropTypes.func,\n    /** Called when the user selects a region of the image */\n    onSelection: PropTypes.func.isRequired,\n    children: PropTypes.func.isRequired\n  };\n\n  static defaultProps = {\n    onMouseMove: null\n  };\n\n  /** Component state */\n  state = {\n    /** Flag to know if the image is currently being loaded */\n    isImageLoading: false,\n    /** Flag to know if the user clicked and is holding the mouse down */\n    isMouseDown: false,\n    /** Coordinates of the mouse when the user started pressing it */\n    mouseDownOriginCoordinates: { x: -1, y: -1 },\n    /** Current mouse coordinates relative to the image viewport */\n    currentMouseCoordinates: { x: -1, y: -1 }\n  };\n\n  componentDidMount() {\n    // Try to get the image and draw it to the canvas If there is an error\n    // update the state.error\n    const canvas = this.refs.canvas;\n    const context = canvas.getContext(\"2d\");\n\n    canvas.width = this.props.rgbaImage.width;\n    canvas.height = this.props.rgbaImage.height;\n    context.putImageData(this.props.rgbaImage.toImageData(), 0, 0);\n\n    this.setState({\n      isImageLoading: false\n    });\n  }\n\n  /** Mouse move event handler, gets the coordinates relative to the image where\n   * the user mouse is pointing to and the pixel RGBA value there and calls\n   * props.onMouseMove */\n  onMouseMove = mouseEvent => {\n    if (!this.props.onMouseMove || this.state.isImageLoading) {\n      return;\n    }\n\n    const coordinates = Coordinates.mapToCoordinatesRelativeToElement(\n      mouseEvent,\n      this.refs.canvas\n    );\n    const pixel = this.props.rgbaImage.getPixel(coordinates);\n\n    if (this.state.isMouseDown) {\n      this.setState({\n        currentMouseCoordinates: coordinates\n      });\n    }\n\n    this.props.onMouseMove(coordinates, pixel);\n  };\n\n  /**\n   * Event listener for the mouse down event. Updates the state to know that the\n   * user wants to select a part of the image and sets the origin mouse\n   * coordinate\n   */\n  onMouseDown = mouseEvent => {\n    const coordinates = Coordinates.mapToCoordinatesRelativeToElement(\n      mouseEvent,\n      this.refs.canvas\n    );\n\n    this.setState({\n      mouseDownOriginCoordinates: coordinates,\n      isMouseDown: true,\n      currentMouseCoordinates: coordinates\n    });\n  };\n\n  /**\n   * Event listener for the mouse up event. Updates the state to know that the\n   * user stopped the selection of the part of the image. Then, if the resulting\n   * rectangle has 0 width or height it is discarted.\n   *\n   * MAYBE TODO: set the current mouse coordinate to the ones on mouse up TODO:\n   * notify the parent component of the selection\n   */\n  onMouseUp = () => {\n    const {\n      isMouseDown,\n      mouseDownOriginCoordinates,\n      currentMouseCoordinates\n    } = this.state;\n\n    if (!isMouseDown) {\n      return;\n    }\n\n    if (\n      mouseDownOriginCoordinates.x === currentMouseCoordinates.x &&\n      mouseDownOriginCoordinates.y === currentMouseCoordinates.y\n    ) {\n      this.setState({\n        isMouseDown: false,\n        mouseDownOriginCoordinates: { x: -1, y: -1 },\n        currentMouseCoordinates: { x: -1, y: -1 }\n      });\n      const { width, height } = this.props.rgbaImage;\n      this.props.onSelection({\n        mouseDownCoords: { x: 0, y: 0 },\n        mouseUpCoords: { x: width, y: height }\n      });\n    } else {\n      this.setState({ isMouseDown: false });\n      this.props.onSelection({\n        mouseDownCoords: mouseDownOriginCoordinates,\n        mouseUpCoords: currentMouseCoordinates\n      });\n    }\n  };\n\n  render() {\n    const { mouseDownOriginCoordinates, currentMouseCoordinates } = this.state;\n\n    return (\n      <div\n        style={{\n          position: \"relative\"\n        }}\n        onMouseDown={this.onMouseDown}\n        onMouseUp={this.onMouseUp}\n        onMouseMove={this.onMouseMove}\n      >\n        <canvas\n          ref=\"canvas\"\n          style={{\n            display: \"block\",\n            backgroundColor: \"#eee\",\n            maxHeight: \"100%\"\n          }}\n        />\n        {this.props.children({\n          originCoords: mouseDownOriginCoordinates,\n          endCoords: currentMouseCoordinates\n        })}\n      </div>\n    );\n  }\n}\n\nexport default ImageComponent;\n","import React, { Component } from \"react\";\nimport \"react-vis/dist/style.css\";\nimport {\n  FlexibleXYPlot,\n  XAxis,\n  YAxis,\n  VerticalGridLines,\n  HorizontalGridLines,\n  VerticalRectSeries,\n  Hint\n} from \"react-vis\";\n\nclass HistogramComponent extends Component {\n  state = {\n    emphasizedValue: null,\n    histogramVisualizationData: []\n  };\n\n  componentDidMount() {\n    this.setState({\n      histogramVisualizationData: this.props.histogram.map(\n        (value, index) => ({ x0: index, x: index + 1, y: value })\n      )\n    });\n  }\n\n  render() {\n    return (\n      <FlexibleXYPlot\n        margin={{\n          top: 50,\n          left: 70\n        }}\n        onMouseLeave={() => this.setState({ emphasizedValue: null })}\n      >\n        <VerticalGridLines />\n        <HorizontalGridLines />\n        <XAxis />\n        <YAxis />\n        <VerticalRectSeries\n          onNearestX={value => this.setState({ emphasizedValue: value })}\n          data={this.state.histogramVisualizationData}\n        />\n        {this.state.emphasizedValue ? (\n          <Hint\n            value={this.state.emphasizedValue}\n            align={{ horizontal: \"auto\", vertical: \"top\" }}\n            style={{ fontSize: 14 }}\n            format={dataPoint => {\n              return [\n                {\n                  title: \"Value: \" + dataPoint.x0,\n                  value: \"Count: \" + dataPoint.y\n                }\n              ];\n            }}\n          />\n        ) : null}\n      </FlexibleXYPlot>\n    );\n  }\n}\n\nexport default HistogramComponent;\n","import React from \"react\";\nimport HistogramComponent from \"../HistogramComponent\";\nimport Button from \"@material-ui/core/Button\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\n/**\n * Renders the given histogram and its information\n */\nexport default class HistogramAndInfoComponent extends React.Component {\n  state = {\n    currentTab: 0\n  };\n\n  updateCurrentTab = (_, newTab) => this.setState({ currentTab: newTab });\n\n  render() {\n    const { currentTab } = this.state;\n    const { histogramValues, histogramInfo } = this.props.histogram;\n    const { counts } = this.props.cHistogram;\n\n    return (\n      <React.Fragment>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\"\n          }}\n        >\n          <Button\n            style={\n              currentTab === 0\n                ? {\n                    boxShadow: \"0px 4px 6px -5px black\"\n                  }\n                : {}\n            }\n            onClick={e => this.updateCurrentTab(e, 0)}\n          >\n            Hist.\n          </Button>\n          <Button\n            style={\n              currentTab === 1\n                ? {\n                    boxShadow: \"0px 4px 6px -5px black\"\n                  }\n                : {}\n            }\n            onClick={e => this.updateCurrentTab(e, 1)}\n          >\n            Cumul.\n          </Button>\n          <Button\n            style={\n              currentTab === 2\n                ? {\n                    boxShadow: \"0px 4px 6px -5px black\"\n                  }\n                : {}\n            }\n            onClick={e => this.updateCurrentTab(e, 2)}\n          >\n            Info.\n          </Button>\n        </div>\n        <div\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n            maxHeight: \"80%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          }}\n        >\n          {currentTab === 0 && (\n            <HistogramComponent histogram={histogramValues} />\n          )}\n          {currentTab === 1 && (\n            <HistogramComponent histogram={counts} />\n          )}\n          {currentTab === 2 && (\n            <div\n              className=\"scrollable\"\n              style={{\n                maxWidth: \"500px\"\n              }}\n            >\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Variable</TableCell>\n                    <TableCell numeric>Value</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  <TableRow>\n                    <TableCell>Count</TableCell>\n                    <TableCell numeric>{histogramInfo.count}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>Brightness</TableCell>\n                    <TableCell numeric>\n                      {histogramInfo.mean.toFixed(3)}\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>Contrast</TableCell>\n                    <TableCell numeric>\n                      {histogramInfo.stdDev.toFixed(3)}\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>Minimum value</TableCell>\n                    <TableCell numeric>{histogramInfo.minValue}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>Maximum value</TableCell>\n                    <TableCell numeric>{histogramInfo.maxValue}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>Mode</TableCell>\n                    <TableCell numeric>{histogramInfo.mode.value}</TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>Entropy</TableCell>\n                    <TableCell numeric>{histogramInfo.entropy}</TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","/**\n * Class to represent image load errors\n */\nexport default class ImageLoadException extends Error {\n  /**\n   * Creates an instance of this class\n   *\n   * @param {string} errorImageSrc Source of the image that caused the error\n   */\n  constructor(errorImageSrc) {\n    super(`Error loading image with src = ${errorImageSrc}`);\n    this.name = \"ImageLoadException\";\n    this.src = errorImageSrc;\n  }\n}\n","/**\n * Exception class representing out of bounds exceptions. Used to know that some\n * value is not in a range that was supposed to be\n */\nexport default class ValueOutOfBoundsException extends Error {\n  constructor(valueOutOfBounds, boundMinimum, boundMaximum) {\n    super(\n      `${valueOutOfBounds} must be between ${boundMinimum} and ${boundMaximum}`\n    );\n\n    this.name = \"ValueOutOfBoundsException\";\n    this.valueOutOfBounds = valueOutOfBounds;\n    this.boundMinimum = boundMinimum;\n    this.boundMaximum = boundMaximum;\n  }\n}\n","/**\n * Exception class representing image operations errors.\n */\nexport default class ImageOperationException extends Error {\n  constructor(exceptionName, message) {\n    super(message);\n    this.name = exceptionName;\n  }\n}","import { ImageLoadException } from \"./Exceptions\";\n\n/**\n * Returns an promise that resolves with\n * an image when it is loaded from the given source\n *\n * @param {string} src Image source\n * @returns {Promise<Image>} Image element after the content has\n * been loaded\n */\nexport function load(src) {\n  const image = new Image();\n  image.src = src;\n\n  return new Promise((resolve, reject) => {\n    image.onload = () => resolve(image);\n    image.onerror = () => reject(new ImageLoadException(src));\n  });\n}\n\n/**\n * Given a File, Blob object or any other object accepted by\n * `URL.createObjectURL`, returns the image loaded from the\n * object source\n *\n * @param {Object} obj Object to get the image source URL\n */\nexport function loadFromObject(obj) {\n  const src = URL.createObjectURL(obj);\n  return load(src).finally(() => URL.revokeObjectURL(src));\n}\n","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport RgbaImageBuffer from \"../../lib/RgbaImageBuffer\";\nimport * as ImageHelper from \"../../lib/imageHelper\";\n\nclass LoadImageMenuItem extends React.Component {\n  /** Listener for a file input event to load the input image to the application */\n  onImageFileInputted = event => {\n    const { enqueueSnackbar, appStore } = this.props;\n    const files = event.target.files;\n\n    if (files.length !== 1 || !files[0]) {\n      enqueueSnackbar(\"Error reading image file\", {\n        variant: \"error\"\n      });\n      return;\n    }\n\n    ImageHelper.loadFromObject(files[0])\n      .then(image => {\n        const canvas = document.createElement(\"canvas\");\n        const context = canvas.getContext(\"2d\");\n\n        canvas.width = image.naturalWidth;\n        canvas.height = image.naturalHeight;\n        context.drawImage(image, 0, 0);\n\n        const imgData = context.getImageData(0, 0, canvas.width, canvas.height);\n        const imageBuffer = RgbaImageBuffer.fromImageData(imgData);\n        appStore.addImage(imageBuffer);\n        this.refs.fileInputForm.reset();\n      })\n      .catch(() => {\n        enqueueSnackbar(\"Could not load image\", {\n          variant: \"error\"\n        });\n      });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <label htmlFor=\"image-input\">\n          <MenuItem>Open</MenuItem>\n        </label>\n        <form ref=\"fileInputForm\">\n          <input\n            hidden\n            id=\"image-input\"\n            type=\"file\"\n            accept=\"image/*\"\n            name=\"image-input\"\n            onChange={this.onImageFileInputted}\n          />\n        </form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withSnackbar(inject(\"appStore\")(observer(LoadImageMenuItem)));\n","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nclass DownloadSelectedImageMenuItem extends React.Component {\n  /** Downloads the selected region of the current selected image if any */\n  downloadCurrentImage = () => {\n    const { enqueueSnackbar, appStore } = this.props;\n    const { type, index } = appStore.selectedGridItem;\n\n    if (type !== \"image\" || index < 0) {\n      enqueueSnackbar(\"You first need to select an image\", {\n        variant: \"warning\"\n      });\n    } else {\n      const imgInfo = appStore.imagesInfos[index];\n      const { left, top, width, height } = imgInfo.region;\n      const imageData = imgInfo.imageBuffer.toImageData();\n      const canvas = document.createElement(\"canvas\");\n      const context = canvas.getContext(\"2d\");\n\n      canvas.width = imageData.width;\n      canvas.height = imageData.height;\n      context.putImageData(imageData, 0, 0, left, top, width, height);\n\n      canvas.toBlob(\n        blob => {\n          const imgUrl = URL.createObjectURL(blob);\n          this.refs.downloadAnchor.href = imgUrl;\n          this.refs.downloadAnchor.click();\n          URL.revokeObjectURL(imgUrl);\n        },\n        null,\n        1\n      );\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <MenuItem onClick={this.downloadCurrentImage}>Download</MenuItem>\n        <div>\n          <a\n            ref=\"downloadAnchor\"\n            href=\"#download\"\n            id=\"download\"\n            hidden\n            download\n          >\n            This should not be visible. It is only used when downloading images\n          </a>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withSnackbar(\n  inject(\"appStore\")(observer(DownloadSelectedImageMenuItem))\n);\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport MenuList from \"@material-ui/core/MenuList\";\nimport LoadImageMenuItem from \"../../ImageProcessingUi/LoadImageMenuItem\";\nimport DownloadSelectedImageMenuItem from \"../../ImageProcessingUi/DownloadSelectedImageMenuItem\";\n\n/**\n * \"File\" Appbar Dropdown menu. Contains all the options that the user can\n * choose about files (upload, download, etc)\n */\nexport default class FileSubmenu extends React.Component {\n  state = {\n    open: false\n  };\n\n  handleToggle = () => {\n    this.setState(state => ({ open: !state.open }));\n  };\n\n  handleClose = event => {\n    if (this.anchorEl.contains(event.target)) {\n      return;\n    }\n\n    this.setState({ open: false });\n  };\n\n  render() {\n    const { open } = this.state;\n\n    return (\n      <div>\n        <Button\n          buttonRef={node => {\n            this.anchorEl = node;\n          }}\n          aria-owns={open ? \"menu-list-grow\" : undefined}\n          aria-haspopup=\"true\"\n          onClick={this.handleToggle}\n          color=\"inherit\"\n        >\n          File\n        </Button>\n        <Popper\n          open={open}\n          style={this.state.open ? {} : { display: \"none\" }}\n          anchorEl={this.anchorEl}\n          transition\n          disablePortal\n        >\n          <Paper onClick={this.handleClose}>\n            <ClickAwayListener onClickAway={this.handleClose}>\n              <MenuList>\n                <LoadImageMenuItem />\n                <DownloadSelectedImageMenuItem />\n              </MenuList>\n            </ClickAwayListener>\n          </Paper>\n        </Popper>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nclass ShowHistogramMenuItem extends React.Component {\n  onClick = () => {\n    const { appStore, enqueueSnackbar } = this.props;\n    const { type, index } = appStore.selectedGridItem;\n\n    if (type !== \"image\" || index < 0) {\n      enqueueSnackbar(\"You first need to select an image\", {\n        variant: \"warning\"\n      });\n      return;\n    }\n\n    this.props.appStore.showHistogramOfCurrentImage();\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <MenuItem onClick={this.onClick}>Histogram</MenuItem>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withSnackbar(\n  inject(\"appStore\")(observer(ShowHistogramMenuItem))\n);\n","import RgbaImageBuffer from \"../RgbaImageBuffer\";\n\n/**\n * Returns an image buffer of the given region of the given buffer\n *\n * @param {RgbaImageBuffer} imgBuffer Buffer of the image to crop\n * @param {Object} region Region specifying where to crop the given buffer\n * @param {number} region.top Pixel in the y axis where the new image must start\n * @param {number} region.left Pixel in the x axis where the new image must\n * start\n * @param {number} region.height Height of the new image\n * @param {number} region.width Width of the new image\n */\nexport const crop = (\n  imgBuffer,\n  { top = 0, left = 0, height = imgBuffer.height, width = imgBuffer.width } = {}\n) => {\n  const resultPixels = new Uint8ClampedArray(\n    height * width * RgbaImageBuffer.NUM_CHANNELS\n  );\n  let currentIndex = 0;\n\n  for (let yOffset = 0; yOffset < height; yOffset += 1) {\n    for (let xOffset = 0; xOffset < width; xOffset += 1) {\n      const pixel = imgBuffer.getPixel({ x: left + xOffset, y: top + yOffset });\n      resultPixels[currentIndex] = pixel[0];\n      resultPixels[currentIndex + 1] = pixel[1];\n      resultPixels[currentIndex + 2] = pixel[2];\n      resultPixels[currentIndex + 3] = pixel[3];\n      currentIndex += RgbaImageBuffer.NUM_CHANNELS;\n    }\n  }\n\n  return new RgbaImageBuffer(width, height, resultPixels);\n};\n","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { crop } from \"../../lib/ImageProcessing/crop\";\n\nclass CropMenuItem extends React.Component {\n  cropCurrentImage = () => {\n    const { enqueueSnackbar, appStore } = this.props;\n    const { imageSelectionMehod } = appStore;\n    const { type, index } = appStore.selectedGridItem;\n\n    if (type !== \"image\" || index < 0) {\n      enqueueSnackbar(\"You first need to select an image\", {\n        variant: \"warning\"\n      });\n    } else if (imageSelectionMehod !== \"selection\") {\n      enqueueSnackbar(\n        \"You need to select a part of the image with the selection tool\",\n        {\n          variant: \"error\"\n        }\n      );\n    } else {\n      const { addImage, imagesInfos } = appStore;\n      addImage(crop(imagesInfos[index].imageBuffer, imagesInfos[index].region));\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <MenuItem onClick={this.cropCurrentImage}>Crop</MenuItem>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withSnackbar(inject(\"appStore\")(observer(CropMenuItem)));\n","/**\n * Returns an array containing the points of the line which connects the given\n * points.\n *\n * @param {Object} firstPoint Origin point of the line\n * @param {Object} secondPoint End point of the line.\n * @returns {Array} Points of the line.\n */\nexport const bresenham = (\n  firstPoint,\n  secondPoint\n) => {\n  let points = [];\n\n  const EPS = 0.0001;\n  let x0 = firstPoint.x;\n  let x1 = secondPoint.x;\n  let y0 = firstPoint.y;\n  let y1 = secondPoint.y;\n  let dx = Math.abs(x1-x0);\n  let dy = Math.abs(y1-y0);\n  let sx = (x0 < x1) ? 1 : -1;\n  let sy = (y0 < y1) ? 1 : -1;\n  let err = dx-dy;\n\n  while(true){\n    points.push({x: x0, y: y0});\n\n    if (Math.abs(x0-x1) < EPS && Math.abs(y0-y1) < EPS) {\n      break;\n    }\n    let e2 = 2 * err;\n    if (e2 > -dy) { \n      err -= dy;\n      x0  += sx; \n    }\n    if (e2 <  dx) {\n      err += dx;\n      y0  += sy; \n    }\n  }\n\n  return points;\n};","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { bresenham } from \"../../lib/Bresenham\";\n\nclass ProfileMenuItem extends React.Component {\n  getProfile = () => {\n    const { enqueueSnackbar, appStore } = this.props;\n    const { imageSelectionMehod } = appStore;\n    const { type, index } = appStore.selectedGridItem;\n\n    if (type !== \"image\" || index < 0) {\n      enqueueSnackbar(\"You first need to select an image\", {\n        variant: \"warning\"\n      });\n    } else if (imageSelectionMehod !== \"line\") {\n      enqueueSnackbar(\n        \"You need to select a line inside the image with the profile tool\",\n        {\n          variant: \"error\"\n        }\n      );\n    } else {\n      const { left, top, width, height } = appStore.imagesInfos[index].region;\n      const points = bresenham(\n        { x: left, y: top },\n        { x: left + width, y: top + height }\n      );\n      const associatedImage = appStore.imagesInfos[index].imageBuffer;\n      const profileValues = points.map(\n        point => associatedImage.getPixel({ x: point.x, y: point.y })[0] // R channel value (grayscale images)\n      );\n      const firstDerivativeProfileValues = [];\n      for (let i = 1; i < profileValues.length - 1; ++i)\n        firstDerivativeProfileValues.push(\n          (profileValues[i + 1] - profileValues[i - 1]) / 2\n        );\n      appStore.addProfile(profileValues, firstDerivativeProfileValues);\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <MenuItem onClick={this.getProfile}>Profile</MenuItem>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withSnackbar(inject(\"appStore\")(observer(ProfileMenuItem)));\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport MenuList from \"@material-ui/core/MenuList\";\nimport ShowHistogramMenuItem from \"../../ImageProcessingUi/ShowHistogramMenuItem\";\nimport CropMenuItem from \"../../ImageProcessingUi/CropMenuItem\";\nimport ProfileMenuItem from \"../../ImageProcessingUi/ProfileMenuItem\";\n\n/**\n * \"Image\" Appbar Dropdown menu. Contains all the general options that the user\n * can choose about an image (see histogram, crop, etc)\n */\nexport default class ImageSubmenu extends React.Component {\n  state = {\n    open: false\n  };\n\n  handleToggle = () => {\n    this.setState(state => ({ open: !state.open }));\n  };\n\n  handleClose = event => {\n    if (this.anchorEl.contains(event.target)) {\n      return;\n    }\n\n    this.setState({ open: false });\n  };\n\n  render() {\n    const { open } = this.state;\n\n    return (\n      <div>\n        <Button\n          buttonRef={node => {\n            this.anchorEl = node;\n          }}\n          aria-owns={open ? \"menu-list-grow\" : undefined}\n          aria-haspopup=\"true\"\n          onClick={this.handleToggle}\n          color=\"inherit\"\n        >\n          Image\n        </Button>\n        <Popper\n          open={open}\n          style={this.state.open ? {} : { display: \"none\" }}\n          anchorEl={this.anchorEl}\n          transition\n          disablePortal\n        >\n          <Paper onClick={this.handleClose}>\n            <ClickAwayListener onClickAway={this.handleClose}>\n              <MenuList>\n                <ShowHistogramMenuItem />\n                <CropMenuItem />\n                <ProfileMenuItem />\n              </MenuList>\n            </ClickAwayListener>\n          </Paper>\n        </Popper>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\n/**\n * Coordinate input component to ask the user for the coordinates of a point\n */\nexport default class InputCoordinate extends React.Component {\n  static propTypes = {\n    /** Current value of the coordinate */\n    coordinate: PropTypes.object.isRequired,\n    /** Listener for coordinate changes */\n    onChange: PropTypes.func.isRequired,\n    /** Listener for coordinate delete */\n    onDelete: PropTypes.func.isRequired\n  };\n\n  onYChange = e => {\n    const number = Number.parseFloat(e.target.value);\n    this.props.onChange({\n      ...this.props.coordinate,\n      y: Number.isFinite(number) ? number : \"\"\n    });\n  };\n\n  onXChange = e => {\n    const number = Number.parseFloat(e.target.value);\n    this.props.onChange({\n      ...this.props.coordinate,\n      x: Number.isFinite(number) ? number : \"\"\n    });\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          width: \"100%\"\n        }}\n      >\n        <TextField\n          type=\"number\"\n          placeholder=\"0\"\n          value={this.props.coordinate.x}\n          onChange={this.onXChange}\n          margin=\"dense\"\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">x: </InputAdornment>\n            )\n          }}\n        />\n        <TextField\n          type=\"number\"\n          placeholder=\"0\"\n          value={this.props.coordinate.y}\n          onChange={this.onYChange}\n          margin=\"dense\"\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">y: </InputAdornment>\n            )\n          }}\n        />\n        <IconButton aria-label=\"Delete\" onClick={this.props.onDelete}>\n          <DeleteIcon />\n        </IconButton>\n      </div>\n    );\n  }\n}\n","import RgbaImageBuffer from \"../RgbaImageBuffer\";\n\n/**\n * Transforms an image according to the given lookup table.\n *\n * @param {RgbaImageBuffer} imgBuffer Image to transform\n * @param {Array} lookupTable Lookup table\n * @returns {RgbaImageBuffer} Transformed image\n */\nexport const transformImage = (imgBuffer, lookupTable) => {\n  let result = imgBuffer.copy();\n  for (let i = 0; i < result.pixels.length; i += RgbaImageBuffer.NUM_CHANNELS) {\n    let newValue = lookupTable[result.pixels[i]];\n    result.pixels[i] = newValue;\n    result.pixels[i + 1] = newValue;\n    result.pixels[i + 2] = newValue;\n  }\n\n  return result;\n};","import { transformImage } from \"./transformImage\";\nimport {ImageOperationException} from \"../Exceptions\";\n\n/**\n * Transforms the given image according to the linear sections\n * conformed by the given points\n *\n * @param {RgbaImageBuffer} imgBuffer Image to transform\n * @param {Array} points Contains the points which defines\n * the sections of the linear transformation\n * @returns {RgbaImageBuffer} Transformed image\n */\nexport const linearTransformation = (\n  imgBuffer,\n  points\n) => {\n  if (points.length < 2)\n    throw new ImageOperationException(\n      \"LinearTransformationException\",\n      \"Linear transformation needs at least 2 points\"\n    );\n  \n  for (let i = 0; i < points.length - 1; ++i) {\n    if (points[i].x > points[i + 1].x)\n      throw new ImageOperationException(\n        \"LinearTransformationException\",\n        \"Points must be ordered according to the x coordinate value\"\n      );\n    \n    if (points[i].x === points[i + 1].x)\n      throw new ImageOperationException(\n        \"LinearTransformationException\",\n        \"Different points should not have the same x coordinate value\"\n      );\n  }\n  \n  if (points[0].x > 0)\n    throw new ImageOperationException(\n      \"LinearTransformationException\",\n      \"X coordinate value of the first point should be less or equal to 0\"\n    );\n\n  if (points[points.length - 1].x < 255)\n    throw new ImageOperationException(\n      \"LinearTransformationException\",\n      \"X coordinate value of the last point should be greater or equal to 255\"\n    );\n\n  let sections = [];\n  for (let i = 1; i < points.length; ++i) {\n    let newSection = {};\n    newSection[\"slope\"] = (points[i].y - points[i - 1].y) / (points[i].x - points[i - 1].x);\n    newSection[\"yIntercept\"] = points[i].y - newSection.slope * points[i].x;\n    newSection[\"frontier\"] = points[i].x;\n    sections.push(newSection);\n  }\n\n  let lookupTable = [];\n  let currentSectionIndex = 0;\n  for (let i = 0; i < 256; ++i) {\n    if (i > sections[currentSectionIndex].frontier)\n      currentSectionIndex++;\n    \n    let newValue = Math.round(\n      sections[currentSectionIndex].slope * i + sections[currentSectionIndex].yIntercept\n    );\n    lookupTable.push(Math.min(Math.max(newValue, 0), 255));\n  }\n  \n  return transformImage(imgBuffer, lookupTable);\n};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport {\n  XYPlot,\n  XAxis,\n  YAxis,\n  HorizontalGridLines,\n  LineSeries\n} from \"react-vis\";\nimport InputCoordinate from \"./InputCoordinate\";\nimport { linearTransformation } from \"../../../../lib/ImageProcessing/linearTransformation\";\n\nconst styles = {\n  center: {\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    marginTop: \"1rem\",\n    marginBottom: \"1rem\"\n  }\n};\n\n/**\n * Dialog to ask the user for the linear sections for a linear transformation\n */\nclass LinearTransformationDialog extends React.Component {\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n  };\n\n  state = {\n    /** List of coordinates */\n    coords: [{ x: 0, y: 0 }, { x: 255, y: 255 }]\n  };\n\n  /** Returns a listener for when the user changes some coordinate */\n  onDataChange = index => newCoords => {\n    this.setState(prevState => ({\n      coords: prevState.coords.map((coord, i) =>\n        i === index ? newCoords : coord\n      )\n    }));\n  };\n\n  /** Returns a listener for when the user deletes some coordinate */\n  onDataDelete = index => () => {\n    this.setState(prevState => ({\n      coords: prevState.coords.filter((_, i) => i !== index)\n    }));\n  };\n\n  /** Listener for when the user wants to add a new coordinate */\n  addNewCoordinate = () => {\n    const newCoord =\n      this.state.coords.length < 1\n        ? { x: 0, y: 0 }\n        : this.state.coords.slice(-1)[0];\n\n    this.setState(prevState => ({ coords: [...prevState.coords, newCoord] }));\n  };\n\n  onSubmit = () => {\n    const { appStore, onClose } = this.props;\n    const { index } = appStore.selectedGridItem;\n\n    appStore.addImage(\n      linearTransformation(\n        appStore.imagesInfos[index].imageBuffer,\n        this.state.coords\n      )\n    );\n\n    onClose();\n  };\n\n  render() {\n    return (\n      <Dialog\n        open={this.props.isOpen}\n        onClose={this.props.onClose}\n        scroll=\"body\"\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Linear Sections</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please, enter the points to define the begin and end of each linear\n            section\n          </DialogContentText>\n          <div style={styles.center}>\n            <XYPlot width={300} height={300}>\n              <HorizontalGridLines />\n              <LineSeries\n                data={this.state.coords}\n                xDomain={[0, 255]}\n                yDomain={[0, 255]}\n              />\n              <XAxis />\n              <YAxis />\n            </XYPlot>\n          </div>\n          <div style={styles.center}>\n            <Button\n              onClick={this.addNewCoordinate}\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Add new coordinate\n            </Button>\n          </div>\n\n          <div>\n            {this.state.coords.map((coord, i) => (\n              <InputCoordinate\n                key={i}\n                coordinate={coord}\n                onChange={this.onDataChange(i)}\n                onDelete={this.onDataDelete(i)}\n              />\n            ))}\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.props.onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={this.onSubmit} color=\"primary\">\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nexport default withSnackbar(\n  inject(\"appStore\")(observer(LinearTransformationDialog))\n);\n","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport LinearTransformationDialog from \"./LinearTransformationDialog\";\n\nclass LinearTransformationMenuItem extends React.Component {\n  state = {\n    isDialogOpen: false\n  };\n\n  openDialog = () => {\n    const { appStore, enqueueSnackbar } = this.props;\n    const { type, index } = appStore.selectedGridItem;\n\n    if (type !== \"image\" || index < 0) {\n      enqueueSnackbar(\"You first need to select an image\", {\n        variant: \"warning\"\n      });\n      return;\n    }\n\n    this.setState({ isDialogOpen: true });\n  };\n  closeDialog = () => this.setState({ isDialogOpen: false });\n\n  render() {\n    return (\n      <React.Fragment>\n        <MenuItem onClick={this.openDialog}>Linear Transformation</MenuItem>\n        <LinearTransformationDialog\n          isOpen={this.state.isDialogOpen}\n          onClose={this.closeDialog}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withSnackbar(\n  inject(\"appStore\")(observer(LinearTransformationMenuItem))\n);\n","/**\n * Returns whether the given value is in range [min, max).\n * That is min <= value < max;\n *\n * @param {number} value  Value to check if it is in range\n * @param {number} min  Range minimum (inclusive)\n * @param {number} max  Range maximum (exclusive)\n */\nexport const isInRange = (value, min, max) => value >= min && value < max;\n","import { transformImage } from \"./transformImage\";\n\n/**\n * Changes the contrast and the brightness of the given image\n *\n * @param {RgbaImageBuffer} imgBuffer Image to transform\n * @param {Number} oldBrightness Previous brightness of the image\n * @param {Number} oldContrast Previous contrast of the image\n * @param {Number} newBrightness New brightness of the image\n * @param {Number} newContrast New contrast of the image\n * @returns {RgbaImageBuffer} Transformed image\n */\nexport const brightnessAndContrastAdjustment = (\n  imgBuffer,\n  oldBrightness,\n  oldContrast,\n  newBrightness,\n  newContrast\n) => {\n  // TODO check parameters\n  const A = newContrast / oldContrast;\n  const B = newBrightness - A * oldBrightness; \n  let lookupTable = [];\n\n  for (let i = 0; i < 256; ++i) {\n    let newValue = Math.round(A * i + B);\n    lookupTable.push(Math.min(Math.max(newValue, 0), 255));\n  }\n\n  return transformImage(imgBuffer, lookupTable);\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { observer, inject } from \"mobx-react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport { isInRange } from \"../../../lib/Checks\";\nimport { brightnessAndContrastAdjustment } from \"../../../lib/ImageProcessing/brightnessAndContrastAdjustment\";\n\nconst styles = {\n  inputsContainer: {\n    flexWrap: \"wrap\",\n    margin: \"1rem\"\n  },\n  input: {\n    margin: \"1rem\"\n  }\n};\n\n/**\n * Dialog to prompt the user for the new brightness and contrast for the new\n * image on the adjust brightness and contrast operation\n */\nclass BrightnessAndContrastDialog extends React.Component {\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n  };\n\n  state = {\n    brightness: 0,\n    brightnessErrorMessage: \"\",\n    contrast: 0,\n    contrastErrorMessage: \"\",\n    formChanged: false\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    const { histogramInfos, selectedGridItem } = props.appStore;\n    let oldBrightness = state.brightness;\n    let oldContrast = state.contrast;\n\n    if (selectedGridItem.index >= 0) {\n      const { histogramInfo } = histogramInfos[\n        selectedGridItem.index\n      ].histogram;\n\n      oldBrightness = histogramInfo.mean;\n      oldContrast = histogramInfo.stdDev;\n    }\n\n    if (!state.formChanged) {\n      return {\n        brightness: +oldBrightness.toFixed(2),\n        contrast: +oldContrast.toFixed(2)\n      };\n    }\n    return null;\n  }\n\n  /** General listener for a change on the brightness or contrast input */\n  onChange = (\n    e,\n    valueStateName,\n    errorMessageStateName,\n    minPossibleValue,\n    maxPossibleValue\n  ) => {\n    const value = Number.parseFloat(e.target.value);\n\n    if (!isInRange(value, minPossibleValue, maxPossibleValue + 1)) {\n      this.setState({\n        [valueStateName]: e.target.value,\n        [errorMessageStateName]: `Required a number between ${minPossibleValue} and ${maxPossibleValue}`,\n        formChanged: true\n      });\n    } else {\n      this.setState({\n        [valueStateName]: value,\n        [errorMessageStateName]: \"\",\n        formChanged: true\n      });\n    }\n  };\n\n  /** Listener for when the user changes the brightness input value */\n  onBrightnessChange = e =>\n    this.onChange(e, \"brightness\", \"brightnessErrorMessage\", 0, 255);\n\n  /** Listener for when the user changes the contrast input value */\n  onContrastChange = e =>\n    this.onChange(e, \"contrast\", \"contrastErrorMessage\", 0, 128);\n\n  onSubmit = () => {\n    const { brightness, contrast } = this.state;\n    const { appStore } = this.props;\n    const { index } = appStore.selectedGridItem;\n\n    appStore.addImage(\n      brightnessAndContrastAdjustment(\n        appStore.imagesInfos[index].imageBuffer,\n        appStore.histogramInfos[index].histogram.histogramInfo.mean,\n        appStore.histogramInfos[index].histogram.histogramInfo.stdDev,\n        brightness,\n        contrast\n      )\n    );\n\n    this.onClose();\n  };\n\n  onClose = () => {\n    this.setState({\n      formChanged: false\n    });\n    this.props.onClose();\n  };\n\n  render() {\n    return (\n      <Dialog\n        open={this.props.isOpen}\n        onClose={this.props.onClose}\n        scroll=\"body\"\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">\n          Brightness and Contrast Ajustment\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please, enter the brightness and contrast for the new image\n          </DialogContentText>\n          <div className=\"center\" style={styles.inputsContainer}>\n            <TextField\n              error={!!this.state.brightnessErrorMessage}\n              label={this.state.brightnessErrorMessage}\n              type=\"number\"\n              placeholder={String(this.state.brightness)}\n              value={this.state.brightness}\n              onChange={this.onBrightnessChange}\n              margin=\"dense\"\n              style={styles.input}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">Brightness: </InputAdornment>\n                )\n              }}\n            />\n            <TextField\n              error={!!this.state.contrastErrorMessage}\n              label={this.state.contrastErrorMessage}\n              type=\"number\"\n              placeholder={String(this.state.contrast)}\n              value={this.state.contrast}\n              onChange={this.onContrastChange}\n              margin=\"dense\"\n              style={styles.input}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">Contrast: </InputAdornment>\n                )\n              }}\n            />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={this.onSubmit} color=\"primary\">\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nexport default inject(\"appStore\")(observer(BrightnessAndContrastDialog));\n","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport BrightnessAndContrastDialog from \"./BrightnessAndContrastDialog\";\n\nclass BrightnessAndContrastMenuItem extends React.Component {\n  state = {\n    isDialogOpen: false\n  };\n\n  openDialog = () => {\n    const { appStore, enqueueSnackbar } = this.props;\n    const { type, index } = appStore.selectedGridItem;\n\n    if (type !== \"image\" || index < 0) {\n      enqueueSnackbar(\"You first need to select an image\", {\n        variant: \"warning\"\n      });\n      return;\n    }\n\n    this.setState({ isDialogOpen: true });\n  };\n\n  closeDialog = () => this.setState({ isDialogOpen: false });\n\n  render() {\n    return (\n      <React.Fragment>\n        <MenuItem onClick={this.openDialog}>Brightness And Contrast</MenuItem>\n        <BrightnessAndContrastDialog\n          isOpen={this.state.isDialogOpen}\n          onClose={this.closeDialog}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withSnackbar(\n  inject(\"appStore\")(observer(BrightnessAndContrastMenuItem))\n);\n","import { transformImage } from \"./transformImage\";\nimport {ImageOperationException} from \"../Exceptions\";\n\n/**\n * Applies gamma correction to the given image\n *\n * @param {RgbaImageBuffer} imgBuffer Image to transform\n * @param {Number} gammaValue Gamma value for gamma correction\n * @returns {RgbaImageBuffer} Transformed image\n */\nexport const gammaCorrection = (\n  imgBuffer,\n  gammaValue\n) => {\n\n  if (gammaValue < 0)\n    throw new ImageOperationException(\"GammaCorrectionException\", \"Invalid gamma value, gamma should be equal or greater than 0.\");\n  \n  let lookupTable = [];\n  for (let i = 0; i < 256; ++i) {\n    lookupTable[i] = (Math.pow(i / 255, gammaValue)) * 255;\n  }\n\n  return transformImage(imgBuffer, lookupTable);\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport { isInRange } from \"../../../lib/Checks\";\nimport { gammaCorrection } from \"../../../lib/ImageProcessing/gammaCorrection\";\n\nconst styles = {\n  inputsContainer: {\n    flexWrap: \"wrap\",\n    margin: \"1rem\"\n  },\n  input: {\n    margin: \"1rem\"\n  }\n};\n\n/**\n * Dialog to prompt the user for the gamma value for the new\n * image on the gamma correction operation\n */\nclass GammaCorrectionDialog extends React.Component {\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n  };\n\n  state = {\n    gamma: 0,\n    gammaErrorMessage: \"\"\n  };\n\n  /** General listener for a change on the gamma input */\n  onChange = (e, valueStateName, errorMessageStateName, errorMessage) => {\n    const value = Number.parseFloat(e.target.value);\n\n    if (!isInRange(value, 0, Number.POSITIVE_INFINITY)) {\n      this.setState({\n        [valueStateName]: e.target.value,\n        [errorMessageStateName]: errorMessage\n      });\n    } else {\n      this.setState({\n        [valueStateName]: value,\n        [errorMessageStateName]: \"\"\n      });\n    }\n  };\n\n  /** Listener for when the user changes the gamma input value */\n  onGammaChange = e =>\n    this.onChange(\n      e,\n      \"gamma\",\n      \"gammaErrorMessage\",\n      \"Required a value equal or greater than 0\"\n    );\n\n  onSubmit = () => {\n    const { appStore } = this.props;\n    const { index } = appStore.selectedGridItem;\n\n    appStore.addImage(\n      gammaCorrection(appStore.imagesInfos[index].imageBuffer, this.state.gamma)\n    );\n\n    this.props.onClose();\n  };\n\n  render() {\n    return (\n      <Dialog\n        open={this.props.isOpen}\n        onClose={this.props.onClose}\n        scroll=\"body\"\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Gamma correction</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please, enter the gamma value for the new image\n          </DialogContentText>\n          <div className=\"center\" style={styles.inputsContainer}>\n            <TextField\n              error={!!this.state.gammaErrorMessage}\n              label={this.state.gammaErrorMessage}\n              type=\"number\"\n              placeholder=\"0\"\n              value={this.state.gamma}\n              onChange={this.onGammaChange}\n              margin=\"dense\"\n              style={styles.input}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">Gamma: </InputAdornment>\n                )\n              }}\n            />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.props.onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={this.onSubmit} color=\"primary\">\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nexport default withSnackbar(\n  inject(\"appStore\")(observer(GammaCorrectionDialog))\n);\n","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport GammaCorrectionDialog from \"./GammaCorrectionDialog\";\n\nclass GammaCorrectionMenuItem extends React.Component {\n  state = {\n    isDialogOpen: false\n  };\n\n  openDialog = () => {\n    const { appStore, enqueueSnackbar } = this.props;\n    const { type, index } = appStore.selectedGridItem;\n\n    if (type !== \"image\" || index < 0) {\n      enqueueSnackbar(\"You first need to select an image\", {\n        variant: \"warning\"\n      });\n      return;\n    }\n\n    this.setState({ isDialogOpen: true });\n  };\n\n  closeDialog = () => this.setState({ isDialogOpen: false });\n\n  render() {\n    return (\n      <React.Fragment>\n        <MenuItem onClick={this.openDialog}>Gamma Correction</MenuItem>\n        <GammaCorrectionDialog\n          isOpen={this.state.isDialogOpen}\n          onClose={this.closeDialog}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withSnackbar(\n  inject(\"appStore\")(observer(GammaCorrectionMenuItem))\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\n\nconst styles = theme => ({\n  root: {\n    backgroundColor: theme.palette.background.paper,\n  },\n});\n\nclass FilesListMenu extends React.Component {\n  state = {\n    anchorEl: null,\n    selectedIndex: this.props.selectedItemIndex,\n  };\n\n  handleClickListItem = event => {\n    this.setState({ anchorEl: event.currentTarget });\n  };\n\n  handleMenuItemClick = (event, index, selectedItemName) => {\n    this.setState({ selectedIndex: index, anchorEl: null });\n    event[\"selectedItemName\"] = selectedItemName;\n    event[\"selectedItemIndex\"] = index;\n    this.props.onItemSelection(event);\n  };\n\n  handleClose = () => {\n    this.setState({ anchorEl: null });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { anchorEl } = this.state;\n\n    return (\n      <div className={classes.root}>\n        <List component=\"nav\">\n          <ListItem\n            disabled={this.props.isDisabled}\n            button\n            aria-haspopup=\"true\"\n            aria-label={this.props.menuTitle}\n            onClick={this.handleClickListItem}\n          >\n            <ListItemText\n              primary={this.props.menuTitle}\n              secondary={\n                (this.props.options.length > 0) ?\n                this.props.options[this.state.selectedIndex] :\n                \"None\"\n              }\n            />\n          </ListItem>\n        </List>\n        { (this.props.options.length > 0) ?\n          <Menu\n            anchorEl={anchorEl}\n            open={Boolean(anchorEl)}\n            onClose={this.handleClose}\n          >\n            {this.props.options.map((option, index) => (\n              <MenuItem\n                key={option}\n                selected={index === this.state.selectedIndex}\n                onClick={event => this.handleMenuItemClick(event, index, option)}\n              >\n                {option}\n              </MenuItem>\n            ))}\n          </Menu> :\n          null\n        }\n        \n      </div>\n    );\n  }\n}\n\nFilesListMenu.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(FilesListMenu);","import RgbaImageBuffer from \"../RgbaImageBuffer\";\nimport {ImageOperationException} from \"../Exceptions\";\n\n/**\n * Calculates the difference (absolute value) between two images\n * \n * @param {RgbaImageBuffer} firstImgBuffer First image\n * @param {RgbaImageBuffer} secondImgBuffer Second image\n * @returns {RgbaImageBuffer} Result image\n */\nexport const imagesDifference = (\n  firstImgBuffer,\n  secondImgBuffer\n) => {\n\n  if (firstImgBuffer.height !== secondImgBuffer.height ||\n      firstImgBuffer.width  !== secondImgBuffer.width)\n      throw new ImageOperationException(\"ImagesDifferenceException\", \"Images should have the same width and height\");\n\n  const result = firstImgBuffer.copy();\n\n  for (let i = 0; i < result.pixels.length; i += RgbaImageBuffer.NUM_CHANNELS) {\n    let newValue = Math.abs(result.pixels[i] - secondImgBuffer.pixels[i]);\n    result.pixels[i] = newValue;\n    result.pixels[i + 1] = newValue;\n    result.pixels[i + 2] = newValue;\n  }\n\n  return result;\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FilesListMenu from \"../../Toolbar/FilesListMenu\";\nimport { imagesDifference } from \"../../../lib/ImageProcessing/imagesDifference\";\n\n/**\n * Dialog to prompt the user for the image name of the image to do the\n * difference operation\n */\nclass ImageDifferenceDialog extends React.Component {\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n  };\n\n  state = {\n    imgName: \"\"\n  };\n\n  onChange = e =>\n    this.setState({\n      imgName: e.selectedItemName\n    });\n\n  onSubmit = () => {\n    const otherImgName = this.state.imgName;\n    const { appStore, enqueueSnackbar } = this.props;\n    const { index } = appStore.selectedGridItem;\n    const otherImageInfo = appStore.imagesInfos.find(\n      ({ key }) => key === otherImgName\n    );\n    const imageBuffer = otherImageInfo && otherImageInfo.imageBuffer;\n\n    if (imageBuffer === undefined) {\n      enqueueSnackbar(\n        `Couldn't find an image with the selected name (${otherImgName})`,\n        {\n          variant: \"error\"\n        }\n      );\n    } else {\n      appStore.addImage(\n        imagesDifference(appStore.imagesInfos[index].imageBuffer, imageBuffer)\n      );\n    }\n\n    this.props.onClose();\n  };\n\n  render() {\n    const activeImagesNames = this.props.appStore.imagesInfos.map(\n      img => img.key\n    );\n\n    return (\n      <Dialog\n        open={this.props.isOpen}\n        onClose={this.props.onClose}\n        scroll=\"body\"\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Image Difference</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please, select the image to perform the difference to the current\n            image\n          </DialogContentText>\n          <div className=\"center\">\n            <FilesListMenu\n              menuTitle=\"Selected image\"\n              options={activeImagesNames}\n              onItemSelection={this.onChange}\n            />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.props.onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={this.onSubmit} color=\"primary\">\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nexport default withSnackbar(\n  inject(\"appStore\")(observer(ImageDifferenceDialog))\n);\n","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport ImageDifferenceDialog from \"./ImageDifferenceDialog\";\n\nclass ImageDifferenceMenuItem extends React.Component {\n  state = {\n    isDialogOpen: false\n  };\n\n  openDialog = () => {\n    const { appStore, enqueueSnackbar } = this.props;\n    const { type, index } = appStore.selectedGridItem;\n\n    if (type !== \"image\" || index < 0) {\n      enqueueSnackbar(\"You first need to select an image\", {\n        variant: \"warning\"\n      });\n    } else {\n      this.setState({ isDialogOpen: true });\n    }\n  };\n\n  closeDialog = () => this.setState({ isDialogOpen: false });\n\n  render() {\n    return (\n      <React.Fragment>\n        <MenuItem onClick={this.openDialog}>Image Difference</MenuItem>\n        <ImageDifferenceDialog\n          isOpen={this.state.isDialogOpen}\n          onClose={this.closeDialog}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withSnackbar(\n  inject(\"appStore\")(observer(ImageDifferenceMenuItem))\n);\n","import RgbaImageBuffer from \"../RgbaImageBuffer\";\nimport {ImageOperationException} from \"../Exceptions\";\nimport {imagesDifference} from \"./imagesDifference\";\n\n/**\n * Detects and highlights the changes of two images\n * according to the given threshold\n * \n * @param {RgbaImageBuffer} firstImgBuffer First image\n * @param {RgbaImageBuffer} secondImgBuffer Second image\n * @param {Number} threshold Threshold for considering a change as a important change\n * @param {Object} changeHighlightColor Color for highlight pixels considered as a change\n * @returns {RgbaImageBuffer} Changes map\n */\nexport const changesDetection = (\n  firstImgBuffer,\n  secondImgBuffer,\n  threshold,\n  changeHighlightColor\n) => {\n\n  let difference;\n  try {\n    difference = imagesDifference(firstImgBuffer, secondImgBuffer);\n  } catch (error) {\n    if (error.name === \"ImagesDifferenceException\")\n      throw new ImageOperationException(\"ChangesDetectionException\", error.message);\n    else\n      throw error;\n  }\n\n  const result = firstImgBuffer.copy();\n\n  for (let i = 0; i < result.pixels.length; i += RgbaImageBuffer.NUM_CHANNELS) {\n    if (difference.pixels[i] > threshold) {\n      result.pixels[i] = changeHighlightColor.r;\n      result.pixels[i + 1] = changeHighlightColor.g;\n      result.pixels[i + 2] = changeHighlightColor.b;\n    }\n  }\n\n  return result;\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport { ChromePicker } from \"react-color\";\nimport FilesListMenu from \"../../Toolbar/FilesListMenu\";\nimport { changesDetection } from \"../../../lib/ImageProcessing/changesDetection\";\n\n/**\n * Dialog to prompt the user for the image name of the image to do the\n * changes detection, color and threshold\n */\nclass ChangesDetectionDialog extends React.Component {\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n  };\n\n  state = {\n    imgName: \"\",\n    rgbaColor: { r: 255, g: 0, b: 0 },\n    threshold: \"\"\n  };\n\n  onImgNameChange = e =>\n    this.setState({\n      imgName: e.selectedItemName\n    });\n\n  onThresholdChange = e => {\n    const newValue = Number.parseFloat(e.target.value);\n\n    this.setState({\n      threshold: Number.isFinite(newValue) ? newValue : \"\"\n    });\n  };\n\n  handleChangeComplete = color => this.setState({ rgbaColor: color.rgb });\n\n  onSubmit = () => {\n    const { imgName, rgbaColor, threshold } = this.state;\n    this.applyChangesDetection({\n      imgName,\n      rgbaColor,\n      threshold: threshold === \"\" ? 0 : threshold\n    });\n    this.props.onClose();\n  };\n\n  applyChangesDetection = ({ imgName, rgbaColor, threshold }) => {\n    const { appStore, enqueueSnackbar } = this.props;\n    const { index } = appStore.selectedGridItem;\n    const otherImageInfo = appStore.imagesInfos.find(\n      ({ key }) => key === imgName\n    );\n    const imageBuffer = otherImageInfo && otherImageInfo.imageBuffer;\n\n    if (imageBuffer === undefined) {\n      enqueueSnackbar(\n        `Couldn't find an image with the selected name (${imgName})`,\n        {\n          variant: \"error\"\n        }\n      );\n    } else {\n      appStore.addImage(\n        changesDetection(\n          appStore.imagesInfos[index].imageBuffer,\n          imageBuffer,\n          threshold,\n          rgbaColor\n        )\n      );\n    }\n  };\n\n  render() {\n    const activeImagesNames = this.props.appStore.imagesInfos.map(\n      img => img.key\n    );\n\n    return (\n      <Dialog\n        open={this.props.isOpen}\n        onClose={this.props.onClose}\n        scroll=\"body\"\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Changes Detection</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please, select the image to detect the changes between them. Also\n            enter the color which will be used to highlight the differences and\n            the difference threshold, value that will determine what is\n            considered a difference and what not\n          </DialogContentText>\n          <div className=\"center\" style={{ justifyContent: \"space-around\" }}>\n            <FilesListMenu\n              menuTitle=\"Selected image\"\n              options={activeImagesNames}\n              onItemSelection={this.onImgNameChange}\n            />\n            <TextField\n              placeholder=\"0\"\n              type=\"number\"\n              value={this.state.threshold}\n              onChange={this.onThresholdChange}\n              margin=\"dense\"\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">Threshold: </InputAdornment>\n                )\n              }}\n            />\n          </div>\n          <div className=\"center\" style={{ marginTop: \"1rem\" }}>\n            <ChromePicker\n              color={this.state.rgbaColor}\n              onChangeComplete={this.handleChangeComplete}\n            />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.props.onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={this.onSubmit} color=\"primary\">\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nexport default withSnackbar(\n  inject(\"appStore\")(observer(ChangesDetectionDialog))\n);\n","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport ChangesDetectionDialog from \"./ChangesDetectionDialog\";\n\nclass ChangesDetectionMenuItem extends React.Component {\n  state = {\n    isDialogOpen: false\n  };\n\n  openDialog = () => {\n    const { appStore, enqueueSnackbar } = this.props;\n    const { type, index } = appStore.selectedGridItem;\n\n    if (type !== \"image\" || index < 0) {\n      enqueueSnackbar(\"You first need to select an image\", {\n        variant: \"warning\"\n      });\n      return;\n    }\n\n    this.setState({ isDialogOpen: true });\n  };\n  closeDialog = () => this.setState({ isDialogOpen: false });\n\n  render() {\n    return (\n      <React.Fragment>\n        <MenuItem onClick={this.openDialog}>Changes Detection</MenuItem>\n        <ChangesDetectionDialog\n          isOpen={this.state.isDialogOpen}\n          onClose={this.closeDialog}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withSnackbar(\n  inject(\"appStore\")(observer(ChangesDetectionMenuItem))\n);\n","import { transformImage } from \"./transformImage\";\n\n/**\n * Applies histogram specification operation to the given image.\n * It expects the image to transform, its cumulative histogram\n * and the cumulative histogram of the target image.\n *\n * @param {RgbaImageBuffer} imgBuffer Image to transform\n * @param {CumulativeHistogram} originImageCHistogram Cumulative histogram of imgBuffer\n * @param {CumulativeHistogram} targetImageCHistogram Cumulative histogram of target image\n * @returns {RgbaImageBuffer} Transformed image\n */\nexport const histogramSpecification = (\n  imgBuffer,\n  originImageCHistogram,\n  targetImageCHistogram\n) => {\n\n  let normalizedOriginImageCHistogram =\n    originImageCHistogram.counts.map( value =>\n      value / originImageCHistogram.count\n    );\n  \n  let normalizedTargetImageCHistogram =\n    targetImageCHistogram.counts.map( value =>\n      value / targetImageCHistogram.count\n    );\n\n  let lookupTable = [];\n  for (let i = 0; i < 256; ++i) {\n    let j = 255;\n    while(j >= 0 && \n      normalizedOriginImageCHistogram[i] <=\n      normalizedTargetImageCHistogram[j]) {\n\n      j = j - 1;\n    }\n    lookupTable.push(j);\n  }\n\n  return transformImage(imgBuffer, lookupTable);\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FilesListMenu from \"../../Toolbar/FilesListMenu\";\nimport { histogramSpecification } from \"../../../lib/ImageProcessing/histogramSpecification\";\n\n/**\n * Dialog to prompt the user for the image name of the image to do the\n * histogram specification\n */\nclass HistogramSpecificationDialog extends React.Component {\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n  };\n\n  state = {\n    imgName: \"\"\n  };\n\n  onChange = e =>\n    this.setState({\n      imgName: e.selectedItemName\n    });\n\n  onSubmit = () => {\n    const otherImgName = this.state.imgName;\n    const { appStore, enqueueSnackbar } = this.props;\n    const { index } = appStore.selectedGridItem;\n    const otherImgIndex = appStore.imagesInfos.findIndex(\n      ({ key }) => key === otherImgName\n    );\n\n    if (otherImgIndex < 0 || otherImgIndex > appStore.imagesInfos.length) {\n      enqueueSnackbar(\n        `Couldn't find an image with the selected name (${otherImgName})`,\n        {\n          variant: \"error\"\n        }\n      );\n    } else {\n      appStore.addImage(\n        histogramSpecification(\n          appStore.imagesInfos[index].imageBuffer,\n          appStore.histogramInfos[index].cHistogram,\n          appStore.histogramInfos[otherImgIndex].cHistogram\n        )\n      );\n    }\n\n    this.props.onClose();\n  };\n\n  render() {\n    const activeImagesNames = this.props.appStore.imagesInfos.map(\n      img => img.key\n    );\n\n    return (\n      <Dialog\n        open={this.props.isOpen}\n        onClose={this.props.onClose}\n        scroll=\"body\"\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">\n          Histogram Specificacion\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please, select the image with the histogram to perform the histogram\n            specification to the current image\n          </DialogContentText>\n          <div className=\"center\">\n            <FilesListMenu\n              menuTitle=\"Selected image\"\n              options={activeImagesNames}\n              onItemSelection={this.onChange}\n            />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.props.onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={this.onSubmit} color=\"primary\">\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nexport default withSnackbar(\n  inject(\"appStore\")(observer(HistogramSpecificationDialog))\n);\n","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport HistogramSpecificationDialog from \"./HistogramSpecificationDialog\";\n\nclass HistogramSpecificationMenuItem extends React.Component {\n  state = {\n    isDialogOpen: false\n  };\n\n  openDialog = () => {\n    const { appStore, enqueueSnackbar } = this.props;\n    const { type, index } = appStore.selectedGridItem;\n\n    if (type !== \"image\" || index < 0) {\n      enqueueSnackbar(\"You first need to select an image\", {\n        variant: \"warning\"\n      });\n      return;\n    }\n\n    this.setState({ isDialogOpen: true });\n  };\n\n  closeDialog = () => this.setState({ isDialogOpen: false });\n\n  render() {\n    return (\n      <React.Fragment>\n        <MenuItem onClick={this.openDialog}>Histogram Specification</MenuItem>\n        <HistogramSpecificationDialog\n          isOpen={this.state.isDialogOpen}\n          onClose={this.closeDialog}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withSnackbar(\n  inject(\"appStore\")(observer(HistogramSpecificationMenuItem))\n);\n","import RgbaImageBuffer from \"../RgbaImageBuffer\";\n\n/**\n * Returns the given pixels converted to grayscale, according to the given\n * grayscale strategy\n *\n * @param {RgbaImageBuffer} imgBuffer Image Buffer base to create the grayscale\n * image from\n * @param {Function} grayscaleStrategy Method used to convert to grayscale.\n * Defaults to Phase Alternating Line\n * @returns {RgbaImageBuffer} Image buffer in grayscale\n */\nexport const imageToGrayscale = (\n  imgBuffer,\n  grayscaleStrategy = pixelToGrayscalePal\n) => {\n  const result = imgBuffer.copy();\n\n  for (let i = 0; i < result.pixels.length; i += RgbaImageBuffer.NUM_CHANNELS) {\n    const rComponent = imgBuffer.pixels[i];\n    const gComponent = imgBuffer.pixels[i + 1];\n    const bComponent = imgBuffer.pixels[i + 2];\n    const grayValue = grayscaleStrategy(rComponent, gComponent, bComponent);\n\n    result.pixels[i] = grayValue;\n    result.pixels[i + 1] = grayValue;\n    result.pixels[i + 2] = grayValue;\n  }\n\n  return result;\n};\n\n/** Returns the given pixel to grayscale according to Phase Alternating Line */\nexport const pixelToGrayscalePal = (rComponent, gComponent, bComponent) =>\n  Math.round(rComponent * 0.222 + gComponent * 0.707 + bComponent * 0.071);\n","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { imageToGrayscale } from \"../../lib/ImageProcessing/grayscale\";\n\nclass GrayscaleMenuItem extends React.Component {\n  currentImageToGrayscale = () => {\n    const { enqueueSnackbar, appStore } = this.props;\n    const { type, index } = this.props.appStore.selectedGridItem;\n\n    if (type !== \"image\" || index < 0) {\n      enqueueSnackbar(\"You first need to select an image\", {\n        variant: \"warning\"\n      });\n    } else {\n      appStore.addImage(\n        imageToGrayscale(appStore.imagesInfos[index].imageBuffer)\n      );\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <MenuItem onClick={this.currentImageToGrayscale}>To Grayscale</MenuItem>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withSnackbar(inject(\"appStore\")(observer(GrayscaleMenuItem)));\n","import { transformImage } from \"./transformImage\";\n\n/**\n * Applies histogram equalization operation to the given image.\n *\n * @param {RgbaImageBuffer} imgBuffer Image to transform\n * @param {CumulativeHistogram} imageCHistogram Cumulative histogram of the image\n * @returns {RgbaImageBuffer} Transformed image\n */\nexport const histogramEqualization = (\n  imgBuffer,\n  imageCHistogram\n) => {\n\n  let equalizationLevel = imageCHistogram.count / 256;\n  let lookupTable = [];\n  for (let i = 0; i < 256; ++i) {\n    lookupTable.push(\n      Math.max(\n        0, \n        Math.round(imageCHistogram.counts[i] / equalizationLevel) - 1\n      )\n    );\n  }\n\n  return transformImage(imgBuffer, lookupTable);\n}","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { histogramEqualization } from \"../../lib/ImageProcessing/histogramEqualization\";\n\nclass HistogramEqualizationMenuItem extends React.Component {\n  currentImageHistogramEqualization = () => {\n    const { enqueueSnackbar, appStore } = this.props;\n    const { type, index } = appStore.selectedGridItem;\n\n    if (type !== \"image\" || index < 0) {\n      enqueueSnackbar(\"You first need to select an image\", {\n        variant: \"warning\"\n      });\n    } else {\n      appStore.addImage(\n        histogramEqualization(\n          appStore.imagesInfos[index].imageBuffer,\n          appStore.histogramInfos[index].cHistogram\n        )\n      );\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <MenuItem onClick={this.currentImageHistogramEqualization}>\n          Histogram Equalization\n        </MenuItem>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withSnackbar(\n  inject(\"appStore\")(observer(HistogramEqualizationMenuItem))\n);\n","import { transformImage } from \"./transformImage\";\nimport {ImageOperationException} from \"../Exceptions\";\n\n/**\n * Applies quantization to the given image according to the given\n * amount of levels\n *\n * @param {RgbaImageBuffer} imgBuffer Image to transform\n * @param {Number} amountOfLevels Amount of bits to represent each value of light\n * @returns {RgbaImageBuffer} Transformed image\n */\nexport const quantization = (\n  imgBuffer,\n  amountOfLevels\n) => {\n\n  if (amountOfLevels < 0 || amountOfLevels > 8)\n    throw new ImageOperationException(\n      \"QuantizationException\", \n      \"Invalid amount of levels, the amount should be equal or greater than 0 and equal or less than 8.\"\n    );\n  \n  if (!Number.isInteger(amountOfLevels))\n    throw new ImageOperationException(\n      \"QuantizationException\", \n      \"Invalid amount of levels, the value should be an integer number.\"\n    );\n  \n  if (amountOfLevels === 8)\n    return imgBuffer;\n  \n  let newValues = [0];\n\n  if (amountOfLevels > 1) {\n    let part = 256 / (Math.pow(2, amountOfLevels) - 1);\n    while (newValues[newValues.length - 1] + part < 255) {\n      newValues.push(newValues[newValues.length - 1] + part);\n    }\n  }\n\n  newValues = newValues.map(value =>\n    Math.round(value)\n  );\n\n  if (amountOfLevels > 0) {\n    newValues.push(255);\n  }\n\n  let lookupTable = [];\n  let distance;\n  let minDistance;\n  let index;\n  for (let i = 0; i < 256; ++i) {\n    minDistance = Number.POSITIVE_INFINITY\n    for (let j = 0; j < newValues.length; ++j) {\n      distance = Math.abs(i - newValues[j]);\n      if (distance < minDistance) {\n        index = j;\n        minDistance = distance;\n      }\n    }\n    lookupTable.push(newValues[index]);\n  }\n  return transformImage(imgBuffer, lookupTable);\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport { isInRange } from \"../../../lib/Checks\";\nimport { quantization } from \"../../../lib/ImageProcessing/quantization\";\n\nconst styles = {\n  inputsContainer: {\n    flexWrap: \"wrap\",\n    margin: \"1rem\"\n  },\n  input: {\n    margin: \"1rem\"\n  }\n};\n\n/**\n * Dialog to prompt the user for the amount of levels for the\n * quantization operation.\n */\nclass QuantizationDialog extends React.Component {\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n  };\n\n  state = {\n    levels: 8,\n    errorMessage: \"\"\n  };\n\n  /** General listener for a change on the level input */\n  onChange = (\n    e,\n    valueStateName,\n    errorMessageStateName,\n    minPossibleValue,\n    maxPossibleValue\n  ) => {\n    const value = Number.parseFloat(e.target.value);\n\n    if (!isInRange(value, minPossibleValue, maxPossibleValue + 1)) {\n      this.setState({\n        [valueStateName]: e.target.value,\n        [errorMessageStateName]: `Required a number between ${minPossibleValue} and ${maxPossibleValue}`\n      });\n    } else {\n      this.setState({\n        [valueStateName]: value,\n        [errorMessageStateName]: \"\"\n      });\n    }\n  };\n\n  /** Listener for when the user changes the levels input value */\n  onLevelsChange = e => this.onChange(e, \"levels\", \"errorMessage\", 0, 8);\n\n  onSubmit = () => {\n    const { levels } = this.state;\n    const { appStore } = this.props;\n    const { index } = appStore.selectedGridItem;\n\n    appStore.addImage(\n      quantization(appStore.imagesInfos[index].imageBuffer, levels)\n    );\n    this.props.onClose();\n  };\n\n  render() {\n    return (\n      <Dialog\n        open={this.props.isOpen}\n        onClose={this.props.onClose}\n        scroll=\"body\"\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Image Resample</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please, enter the amount of levels for the quantization\n          </DialogContentText>\n          <div className=\"center\" style={styles.inputsContainer}>\n            <TextField\n              error={!!this.state.errorMessage}\n              label={this.state.errorMessage}\n              type=\"number\"\n              placeholder={String(this.state.levels)}\n              value={this.state.levels}\n              onChange={this.onLevelsChange}\n              margin=\"dense\"\n              style={styles.input}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">Levels: </InputAdornment>\n                )\n              }}\n            />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.props.onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={this.onSubmit} color=\"primary\">\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nexport default withSnackbar(inject(\"appStore\")(observer(QuantizationDialog)));\n","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport QuantizationDialog from \"./QuantizationDialog\";\n\nclass QuantizationMenuItem extends React.Component {\n  state = {\n    isDialogOpen: false\n  };\n\n  openDialog = () => {\n    const { appStore, enqueueSnackbar } = this.props;\n    const { type, index } = appStore.selectedGridItem;\n    if (type !== \"image\" || index < 0) {\n      enqueueSnackbar(\"You first need to select an image\", {\n        variant: \"warning\"\n      });\n    } else {\n      this.setState({ isDialogOpen: true });\n    }\n  };\n\n  closeDialog = () => this.setState({ isDialogOpen: false });\n\n  render() {\n    return (\n      <React.Fragment>\n        <MenuItem onClick={this.openDialog}>Quantization</MenuItem>\n        <QuantizationDialog\n          isOpen={this.state.isDialogOpen}\n          onClose={this.closeDialog}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withSnackbar(inject(\"appStore\")(observer(QuantizationMenuItem)));\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport MenuList from \"@material-ui/core/MenuList\";\nimport LinearTransformationMenuItem from \"../../ImageProcessingUi/LinearTransformationMenuItem\";\nimport BrightnessAndContrastMenuItem from \"../../ImageProcessingUi/BrightnessAndContrastMenuItem\";\nimport GammaCorrectionMenuItem from \"../../ImageProcessingUi/GammaCorrectionMenuItem\";\nimport ImageDifferenceMenuItem from \"../../ImageProcessingUi/ImageDifferenceMenuItem\";\nimport ChangesDetectionMenuItem from \"../../ImageProcessingUi/ChangesDetectionMenuItem\";\nimport HistogramSpecificationMenuItem from \"../../ImageProcessingUi/HistogramSpecificationMenuItem\";\nimport GrayscaleMenuItem from \"../../ImageProcessingUi/GrayscaleMenuItem\";\nimport HistogramEqualizationMenuItem from \"../../ImageProcessingUi/HistogramEqualizationMenuItem\";\nimport QuantizationMenuItem from \"../../ImageProcessingUi/QuantizationMenuItem\";\n\n/**\n * \"Point Operations\" Appbar Dropdown menu. Contains all the point operations\n * options that the user can choose\n */\nexport default class PointOperationsSubmenu extends React.Component {\n  state = {\n    open: false\n  };\n\n  handleToggle = () => {\n    this.setState(state => ({ open: !state.open }));\n  };\n\n  handleClose = event => {\n    if (this.anchorEl.contains(event.target)) {\n      return;\n    }\n\n    this.setState({ open: false });\n  };\n\n  render() {\n    return (\n      <div>\n        <Button\n          buttonRef={node => {\n            this.anchorEl = node;\n          }}\n          aria-owns={this.state.open ? \"file-menu-list-grow\" : undefined}\n          aria-haspopup=\"true\"\n          onClick={this.handleToggle}\n          color=\"inherit\"\n        >\n          Point Operations\n        </Button>\n        <Popper\n          open={this.state.open}\n          style={this.state.open ? {} : { display: \"none\" }}\n          anchorEl={this.anchorEl}\n          transition\n          disablePortal\n        >\n          <Paper onClick={this.handleClose}>\n            <ClickAwayListener onClickAway={this.handleClose}>\n              <MenuList>\n                <GrayscaleMenuItem />\n                <LinearTransformationMenuItem />\n                <BrightnessAndContrastMenuItem />\n                <GammaCorrectionMenuItem />\n                <ImageDifferenceMenuItem />\n                <ChangesDetectionMenuItem />\n                <HistogramSpecificationMenuItem />\n                <HistogramEqualizationMenuItem />\n                <QuantizationMenuItem />\n              </MenuList>\n            </ClickAwayListener>\n          </Paper>\n        </Popper>\n      </div>\n    );\n  }\n}\n","import RgbaImageBuffer from \"../RgbaImageBuffer\";\nimport {isInRange} from \"../Checks\";\n\n/**\n * Returns the image buffer resulting of rotating the given image buffer.\n * If the rotateAndPaintRotation flag is set to false, the transparent\n * pixels of the resulting image will be filled. The given interpolation\n * method will calculate the values of the new pixels.\n * \n * @param {RgbaImageBuffer} imgBuffer Buffer of the image to rotate\n * @param {Number} degrees Rotation parameter\n * @param {Function} interpolationMethod Interpolation method to calculate the\n * possible new lightness values obtained after applying the geometric operation\n * @param {Boolean} rotateAndPaintRotation Establishes the nature of the rotation\n */\nexport const imageRotation = (\n    imgBuffer,\n    degrees,\n    interpolationMethod,\n    rotateAndPaintRotation\n) => {\n    const width = imgBuffer.width;\n    const height = imgBuffer.height;\n    const radians = degrees * (Math.PI / 180);\n    const directTransformation = (xCoord, yCoord) => {\n        return {\n            x: (Math.cos(radians) * xCoord) - (Math.sin(radians) * yCoord),\n            y: (Math.sin(radians) * xCoord) + (Math.cos(radians) * yCoord)\n        };\n    };\n    const newImageInfo = getRotatedImageInfo(\n        width, \n        height, \n        directTransformation\n    );\n\n    if (rotateAndPaintRotation) {\n        return rotateAndPaint(\n            imgBuffer, \n            directTransformation, \n            newImageInfo\n        );\n    }\n\n    const inverseTransformation = (xCoord, yCoord) => {\n        return {\n            x: (Math.cos(-radians) * xCoord) - (Math.sin(-radians) * yCoord),\n            y: (Math.sin(-radians) * xCoord) + (Math.cos(-radians) * yCoord)\n        };\n    };\n    \n    const resultPixels = new Uint8ClampedArray(\n        newImageInfo.width * newImageInfo.height * RgbaImageBuffer.NUM_CHANNELS\n    );\n    let transformedCoords;\n    let newValue;\n    let currentIndex = 0;\n    for (let j = 0; j < newImageInfo.height; ++j) {\n        for (let i = 0; i < newImageInfo.width; ++i) {\n            transformedCoords = inverseTransformation(\n                i + newImageInfo.minXCoord, \n                j + newImageInfo.minYCoord\n            );\n            if (isInRange(Math.round(transformedCoords.x), 0, width + 1) &&\n                isInRange(Math.round(transformedCoords.y), 0, height + 1)) {\n                \n                newValue = Math.round(interpolationMethod(\n                    transformedCoords.x,\n                    transformedCoords.y,\n                    imgBuffer\n                ));\n                // TODO: colored images\n                // For now we assume we are operating with grayscale images\n                resultPixels[currentIndex]     = newValue; // R channel\n                resultPixels[currentIndex + 1] = newValue; // G channel\n                resultPixels[currentIndex + 2] = newValue; // B channel\n                resultPixels[currentIndex + 3] = 255;      // A channel\n            } else {\n                // Background pixel\n                resultPixels[currentIndex]     = 0; // R channel\n                resultPixels[currentIndex + 1] = 0; // G channel\n                resultPixels[currentIndex + 2] = 0; // B channel\n                resultPixels[currentIndex + 3] = 0;   // A channel\n            }\n            currentIndex += RgbaImageBuffer.NUM_CHANNELS;\n        }\n    }\n    return new RgbaImageBuffer(\n        newImageInfo.width, \n        newImageInfo.height, \n        resultPixels\n    );\n};\n\n/**\n * Returns the image buffer resulting of rotating the given image buffer.\n * It may contain transparent pixels due to the nature of this rotation\n * process, the inverse tranformation it isn't used.\n * \n * @param {RgbaImageBuffer} imgBuffer Buffer of the image to rotate\n * @param {Function} directTransformation Maps the old image pixels\n * positions to the new one positions\n * @param {Object} newImageInfo Contains relevant information about\n * the resulting image\n */\nexport const rotateAndPaint = (\n    imgBuffer,\n    directTransformation,\n    newImageInfo\n) => {\n    const resultPixels = new Uint8ClampedArray(\n        newImageInfo.width * newImageInfo.height * RgbaImageBuffer.NUM_CHANNELS\n    );\n    let transformedCoords;\n    let currentIndex;\n    let originalImagePixel;\n    for (let j = 0; j < imgBuffer.height; ++j) {\n        for (let i = 0; i < imgBuffer.width; ++i) {\n            transformedCoords = directTransformation(i, j);\n            currentIndex = (Math.round(transformedCoords.y - newImageInfo.minYCoord) * \n                newImageInfo.width + Math.round(transformedCoords.x - newImageInfo.minXCoord)) * \n                RgbaImageBuffer.NUM_CHANNELS;\n            // TODO: colored images\n            // For now we assume we are operating with grayscale images\n            originalImagePixel = imgBuffer.getPixel({x: i, y:j});\n            resultPixels[currentIndex]     = originalImagePixel[0]; // R channel\n            resultPixels[currentIndex + 1] = originalImagePixel[1]; // G channel\n            resultPixels[currentIndex + 2] = originalImagePixel[2]; // B channel\n            resultPixels[currentIndex + 3] = originalImagePixel[3]; // A channel\n        }\n    }\n    return new RgbaImageBuffer(\n        newImageInfo.width, \n        newImageInfo.height, \n        resultPixels\n    );\n};\n\n/**\n * Returns information about the rotated image.\n *\n * @param {Number} width Width of the image to rotate\n * @param {Number} height Height of the image to rotate\n * @param {Function} directTransformation Needed to calculate the new dimensions \n */\nexport const getRotatedImageInfo = (\n    width,\n    height,\n    directTransformation\n) => {\n    const upperLeftCornerRotated = directTransformation(0, 0);\n    const lowerLeftCornerRotated = directTransformation(0, height);\n    const upperRightCornerRotated = directTransformation(width, 0);\n    const lowerRightCornerRotated = directTransformation(width, height);\n    const maxXCoord = Math.max(\n        upperLeftCornerRotated.x,\n        lowerLeftCornerRotated.x,\n        upperRightCornerRotated.x,\n        lowerRightCornerRotated.x\n    );\n    const minXCoord = Math.min(\n        upperLeftCornerRotated.x,\n        lowerLeftCornerRotated.x,\n        upperRightCornerRotated.x,\n        lowerRightCornerRotated.x\n    );\n    const maxYCoord = Math.max(\n        upperLeftCornerRotated.y,\n        lowerLeftCornerRotated.y,\n        upperRightCornerRotated.y,\n        lowerRightCornerRotated.y\n    );\n    const minYCoord = Math.min(\n        upperLeftCornerRotated.y,\n        lowerLeftCornerRotated.y,\n        upperRightCornerRotated.y,\n        lowerRightCornerRotated.y\n    );\n\n    return {\n        width:  Math.floor(Math.abs(maxXCoord - minXCoord)),\n        height: Math.floor(Math.abs(maxYCoord - minYCoord)),\n        minXCoord: minXCoord,\n        minYCoord: minYCoord\n    };\n};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport FilesListMenu from \"../../Toolbar/FilesListMenu\";\n\nconst styles = {\n  inputsContainer: {\n    flexWrap: \"wrap\"\n  },\n  input: {\n    margin: \"1rem\"\n  },\n  center: {\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    marginTop: \"1rem\",\n    marginBottom: \"1rem\"\n  }\n};\n\n/**\n * Dialog to prompt the user for the degrees, interpolation method\n * and \"rotate and print\" flag for the rotation operation.\n */\nexport default class ImageRotationDialog extends React.Component {\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    interpolationMethods: PropTypes.array.isRequired\n  };\n\n  state = {\n    degrees: 0,\n    degreesErrorMessage: \"\",\n    rotateAndPaint: false,\n    interpolationMethod: this.props.interpolationMethods[0],\n    selectedInterpolationMethodIndex: 0\n  };\n\n  /** Listener for when the user changes the degrees input value */\n  onDegreesChange = e => {\n    if (!Number.parseFloat(e.target.value)) {\n      this.setState({\n        degrees: e.target.value,\n        degreesErrorMessage: \"Enter an amount of degrees\"\n      });\n    } else {\n      this.setState({\n        degrees: Number.parseFloat(e.target.value),\n        degreesErrorMessage: \"\"\n      });\n    }\n  };\n\n  /** Listener for when the user changes the rotate and paint*/\n  onRotateAndPaintChange = e => {\n    this.setState({\n      rotateAndPaint: e.target.checked\n    });\n  };\n\n  /** Listener for when the user changes the interpolation method */\n  onInterpolationMethodChange = e =>\n    this.setState({\n      interpolationMethod: e.selectedItemName,\n      selectedInterpolationMethodIndex: e.selectedItemIndex\n    });\n\n  onSubmit = () => {\n    const { degrees, rotateAndPaint, interpolationMethod } = this.state;\n    this.props.onSubmit({\n      degrees,\n      rotateAndPaint,\n      interpolationMethod\n    });\n  };\n\n  render() {\n    return (\n      <Dialog\n        open={this.props.isOpen}\n        onClose={this.props.onClose}\n        scroll=\"body\"\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Image rotation</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please, enter the rotation parameters\n          </DialogContentText>\n          <div className=\"center\" style={styles.inputsContainer}>\n            <div style={styles.center}>\n              <TextField\n                error={!!this.state.degreesErrorMessage}\n                label={this.state.degreesErrorMessage}\n                type=\"number\"\n                placeholder=\"0\"\n                value={this.state.degrees}\n                onChange={this.onDegreesChange}\n                margin=\"dense\"\n                style={styles.input}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">Degrees: </InputAdornment>\n                  )\n                }}\n              />\n            </div>\n            <FilesListMenu\n              menuTitle=\"Interpolation method\"\n              options={this.props.interpolationMethods}\n              onItemSelection={this.onInterpolationMethodChange}\n              isDisabled={this.state.rotateAndPaint}\n              selectedItemIndex={this.state.selectedInterpolationMethodIndex}\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={this.state.rotateAndPaint}\n                  onChange={this.onRotateAndPaintChange}\n                  value=\"rotateAndPaint\"\n                  color=\"primary\"\n                />\n              }\n              label=\"Rotate and paint\"\n            />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.props.onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={this.onSubmit} color=\"primary\">\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { imageRotation } from \"../../../lib/ImageProcessing/imageRotation\";\nimport InterpolationMethods from \"../../../lib/ImageProcessing/interpolationMethods\";\nimport ImageRotationDialog from \"./ImageRotationDialog\";\n\nclass ImageRotationMenuItem extends React.Component {\n  state = {\n    isDialogOpen: false\n  };\n\n  openDialog = () => {\n    const { appStore, enqueueSnackbar } = this.props;\n    const { type, index } = appStore.selectedGridItem;\n\n    if (type !== \"image\" || index < 0) {\n      enqueueSnackbar(\"You first need to select an image\", {\n        variant: \"warning\"\n      });\n      return;\n    }\n\n    this.setState({ isDialogOpen: true });\n  };\n\n  closeDialog = () => this.setState({ isDialogOpen: false });\n\n  rotateCurrentImage = ({ degrees, rotateAndPaint, interpolationMethod }) => {\n    const { appStore } = this.props;\n    const { index } = appStore.selectedGridItem;\n\n    appStore.addImage(\n      imageRotation(\n        appStore.imagesInfos[index].imageBuffer,\n        degrees,\n        InterpolationMethods[interpolationMethod],\n        rotateAndPaint\n      )\n    );\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <MenuItem onClick={this.openDialog}>Rotation</MenuItem>\n        <ImageRotationDialog\n          isOpen={this.state.isDialogOpen}\n          onClose={this.closeDialog}\n          onSubmit={rotationInfo => {\n            this.closeDialog();\n            this.rotateCurrentImage(rotationInfo);\n          }}\n          interpolationMethods={Object.keys(InterpolationMethods)}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withSnackbar(\n  inject(\"appStore\")(observer(ImageRotationMenuItem))\n);\n","import RgbaImageBuffer from \"../RgbaImageBuffer\";\nimport { ImageOperationException } from \"../Exceptions\";\n\n/**\n * Returns the image buffer resulting of resizing the given image buffer.\n *\n * @param {RgbaImageBuffer} imgBuffer Buffer of the image to resize\n * @param {Number} widthPercentage Resizing parameter\n * @param {Number} heightPercentage Resizing parameter\n * @param {Function} interpolationMethod Interpolation method to calculate the\n * possible new lightness values obtained after applying the geometric operation\n */\nexport const imageResizing = (\n  imgBuffer,\n  widthPercentage,\n  heighPercentage,\n  interpolationMethod\n) => {\n  const oldWidth = imgBuffer.width;\n  const oldHeight = imgBuffer.height;\n  const widthFactor = widthPercentage / 100;\n  const heightFactor = heighPercentage / 100;\n  const newWidth = Math.floor(oldWidth * widthFactor);\n  const newHeight = Math.floor(oldHeight * heightFactor);\n\n  if (newWidth < 1) {\n    throw new ImageOperationException(\n      \"ImageResizingException\",\n      \"Width of the resized image is too small.\"\n    );\n  }\n  if (newHeight < 1) {\n    throw new ImageOperationException(\n      \"ImageResizingException\",\n      \"Height of the resized image is too small.\"\n    );\n  }\n\n  const inverseTransformation = (xCoord, yCoord) => {\n    return {\n      x: xCoord / widthFactor,\n      y: yCoord / heightFactor\n    };\n  };\n\n  const resultPixels = new Uint8ClampedArray(\n    newWidth * newHeight * RgbaImageBuffer.NUM_CHANNELS\n  );\n  let transformedCoords;\n  let newValue;\n  let currentIndex = 0;\n  for (let j = 0; j < newHeight; ++j) {\n    for (let i = 0; i < newWidth; ++i) {\n      transformedCoords = inverseTransformation(i, j);\n      newValue = Math.round(\n        interpolationMethod(transformedCoords.x, transformedCoords.y, imgBuffer)\n      );\n      resultPixels[currentIndex] = newValue;\n      resultPixels[currentIndex + 1] = newValue;\n      resultPixels[currentIndex + 2] = newValue;\n      resultPixels[currentIndex + 3] = 255;\n      currentIndex += RgbaImageBuffer.NUM_CHANNELS;\n    }\n  }\n  return new RgbaImageBuffer(newWidth, newHeight, resultPixels);\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport FilesListMenu from \"../../Toolbar/FilesListMenu\";\n\nconst styles = {\n  inputsContainer: {\n    flexWrap: \"wrap\"\n  },\n  input: {\n    margin: \"1rem\"\n  },\n  center: {\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    marginTop: \"0.4rem\",\n    marginBottom: \"0.4rem\"\n  }\n};\n\n/**\n * Dialog to prompt the user for the new dimensions and\n * interpolation method for the resizing operation.\n */\nexport default class ImageResizingDialog extends React.Component {\n  static propTypes = {\n    oldWidth: PropTypes.number.isRequired,\n    oldHeight: PropTypes.number.isRequired,\n    isOpen: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    interpolationMethods: PropTypes.array.isRequired\n  };\n\n  state = {\n    width: this.props.oldWidth,\n    widthPercentage: 100,\n    widthErrorMessage: \"\",\n    height: this.props.oldHeight,\n    heightPercentage: 100,\n    heightErrorMessage: \"\",\n    interpolationMethod: this.props.interpolationMethods[0],\n    selectedInterpolationMethodIndex: 0,\n    formChanged: false\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (\n      !state.formChanged &&\n      (props.oldHeight !== state.height || props.oldWidth !== state.width)\n    ) {\n      return {\n        height: props.oldHeight,\n        width: props.oldWidth,\n        widthPercentage: 100,\n        heightPercentage: 100,\n        widthErrorMessage:\n          props.oldWidth <= 0 ? \"Width must be greater than 0\" : \"\",\n        heightErrorMessage:\n          props.oldHeight <= 0 ? \"Height must be greater than 0\" : \"\"\n      };\n    }\n\n    if (props.oldHeight === 0 && props.oldWidth === 0) {\n      return {\n        widthErrorMessage: \"Select an image\",\n        heightErrorMessage: \"Select an image\",\n        width: 0,\n        widthPercentage: 0,\n        height: 0,\n        heightPercentage: 0\n      };\n    }\n    return null;\n  }\n\n  /** General listener for when the user changes dimension inputs */\n  onDimensionsChange = (\n    e,\n    dimensionName,\n    dimensionStateName,\n    oldDimensionPropName,\n    percentageStateName,\n    errorMessageStateName,\n    isPercentage\n  ) => {\n    const value = Number.parseFloat(e.target.value);\n    let dimension;\n    let percentage;\n    if (!isPercentage) {\n      dimension = Math.round(value);\n      percentage = (dimension * 100) / this.props[oldDimensionPropName];\n    } else {\n      dimension = Math.floor((value / 100) * this.props[oldDimensionPropName]);\n      percentage = value;\n    }\n    if (dimension < 1 || Number.isNaN(value)) {\n      this.setState({\n        [dimensionStateName]: isPercentage ? \"\" : e.target.value,\n        [percentageStateName]: isPercentage ? e.target.value : \"\",\n        [errorMessageStateName]: dimensionName + \" must be greater than 0\",\n        formChanged: true\n      });\n    } else {\n      this.setState({\n        [dimensionStateName]: isPercentage ? dimension : value,\n        [percentageStateName]: isPercentage ? value : percentage,\n        [errorMessageStateName]: \"\",\n        formChanged: true\n      });\n    }\n  };\n\n  /** Listener for when the user changes width input */\n  onWidthChange = e =>\n    this.onDimensionsChange(\n      e,\n      \"Width\",\n      \"width\",\n      \"oldWidth\",\n      \"widthPercentage\",\n      \"widthErrorMessage\",\n      false\n    );\n\n  /** Listener for when the user changes height input */\n  onHeightChange = e =>\n    this.onDimensionsChange(\n      e,\n      \"Height\",\n      \"height\",\n      \"oldHeight\",\n      \"heightPercentage\",\n      \"heightErrorMessage\",\n      false\n    );\n\n  /** Listener for when the user changes width percentage input */\n  onWidthPercentageChange = e =>\n    this.onDimensionsChange(\n      e,\n      \"Width\",\n      \"width\",\n      \"oldWidth\",\n      \"widthPercentage\",\n      \"widthErrorMessage\",\n      true\n    );\n\n  /** Listener for when the user changes height percentage input */\n  onHeightPercentageChange = e =>\n    this.onDimensionsChange(\n      e,\n      \"Height\",\n      \"height\",\n      \"oldHeight\",\n      \"heightPercentage\",\n      \"heightErrorMessage\",\n      true\n    );\n\n  /** Listener for when the user changes the interpolation method */\n  onInterpolationMethodChange = e =>\n    this.setState({\n      interpolationMethod: e.selectedItemName,\n      selectedInterpolationMethodIndex: e.selectedItemIndex\n    });\n\n  onSubmit = () => {\n    //TODO: Check resizing parameters\n    this.setState({\n      formChanged: false\n    });\n    const {\n      widthPercentage,\n      heightPercentage,\n      interpolationMethod\n    } = this.state;\n    this.props.onSubmit({\n      widthPercentage,\n      heightPercentage,\n      interpolationMethod\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      formChanged: false\n    });\n    this.props.onClose();\n  };\n\n  render() {\n    return (\n      <Dialog\n        open={this.props.isOpen}\n        onClose={this.props.onClose}\n        scroll=\"body\"\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Image resizing</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please, enter the resizing parameters\n          </DialogContentText>\n          <div style={styles.center}>\n            <TextField\n              error={!!this.state.widthErrorMessage}\n              label={this.state.widthErrorMessage}\n              type=\"number\"\n              placeholder={String(this.props.oldWidth)}\n              value={this.state.width}\n              onChange={this.onWidthChange}\n              margin=\"dense\"\n              style={styles.input}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">Width: </InputAdornment>\n                ),\n                endAdornment: (\n                  <InputAdornment position=\"end\">px </InputAdornment>\n                )\n              }}\n            />\n            <TextField\n              error={!!this.state.heightErrorMessage}\n              label={this.state.heightErrorMessage}\n              type=\"number\"\n              placeholder={String(this.props.oldHeight)}\n              value={this.state.height}\n              onChange={this.onHeightChange}\n              margin=\"dense\"\n              style={styles.input}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">Height: </InputAdornment>\n                ),\n                endAdornment: (\n                  <InputAdornment position=\"end\">px </InputAdornment>\n                )\n              }}\n            />\n          </div>\n          <div className=\"center\" style={styles.inputsContainer}>\n            <div style={styles.center}>\n              <TextField\n                error={!!this.state.widthErrorMessage}\n                label={this.state.widthErrorMessage}\n                type=\"number\"\n                placeholder=\"100\"\n                value={this.state.widthPercentage}\n                onChange={this.onWidthPercentageChange}\n                margin=\"dense\"\n                style={styles.input}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      Percentage:{\" \"}\n                    </InputAdornment>\n                  ),\n                  endAdornment: (\n                    <InputAdornment position=\"end\">% </InputAdornment>\n                  )\n                }}\n              />\n              <TextField\n                error={!!this.state.heightErrorMessage}\n                label={this.state.heightErrorMessage}\n                type=\"number\"\n                placeholder=\"100\"\n                value={this.state.heightPercentage}\n                onChange={this.onHeightPercentageChange}\n                margin=\"dense\"\n                style={styles.input}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      Percentage:{\" \"}\n                    </InputAdornment>\n                  ),\n                  endAdornment: (\n                    <InputAdornment position=\"end\">% </InputAdornment>\n                  )\n                }}\n              />\n            </div>\n            <FilesListMenu\n              menuTitle=\"Interpolation method\"\n              options={this.props.interpolationMethods}\n              onItemSelection={this.onInterpolationMethodChange}\n              selectedItemIndex={this.state.selectedInterpolationMethodIndex}\n            />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={this.onSubmit} color=\"primary\">\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InterpolationMethods from \"../../../lib/ImageProcessing/interpolationMethods\";\nimport { imageResizing } from \"../../../lib/ImageProcessing/imageResizing\";\nimport ImageResizingDialog from \"./ImageResizingDialog\";\n\nclass ImageResizeMenuItem extends React.Component {\n  state = {\n    isDialogOpen: false\n  };\n\n  openDialog = () => {\n    const { appStore, enqueueSnackbar } = this.props;\n    const { type, index } = appStore.selectedGridItem;\n\n    if (type !== \"image\" || index < 0) {\n      enqueueSnackbar(\"You first need to select an image\", {\n        variant: \"warning\"\n      });\n      return;\n    }\n\n    this.setState({ isDialogOpen: true });\n  };\n\n  closeDialog = () => this.setState({ isDialogOpen: false });\n\n  resizeCurrentImage = ({\n    widthPercentage,\n    heightPercentage,\n    interpolationMethod\n  }) => {\n    const { appStore } = this.props;\n    const { index } = appStore.selectedGridItem;\n\n    appStore.addImage(\n      imageResizing(\n        appStore.imagesInfos[index].imageBuffer,\n        widthPercentage,\n        heightPercentage,\n        InterpolationMethods[interpolationMethod]\n      )\n    );\n  };\n\n  render() {\n    const { appStore } = this.props;\n    const { type, index } = appStore.selectedGridItem;\n    let selectedImageDimensions = { width: 0, height: 0 };\n\n    if (type === \"image\" && index >= 0) {\n      const imgBuffer = appStore.imagesInfos[index].imageBuffer;\n\n      selectedImageDimensions = {\n        width: imgBuffer.width,\n        height: imgBuffer.height\n      };\n    }\n\n    return (\n      <React.Fragment>\n        <MenuItem onClick={this.openDialog}>Resize</MenuItem>\n        <ImageResizingDialog\n          oldWidth={selectedImageDimensions.width}\n          oldHeight={selectedImageDimensions.height}\n          isOpen={this.state.isDialogOpen}\n          onClose={this.closeDialog}\n          onSubmit={resizeInfo => {\n            this.closeDialog();\n            this.resizeCurrentImage(resizeInfo);\n          }}\n          interpolationMethods={Object.keys(InterpolationMethods)}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withSnackbar(inject(\"appStore\")(observer(ImageResizeMenuItem)));\n","import RgbaImageBuffer from \"../RgbaImageBuffer\";\n\n/**\n * Applies horizontal mirror operation to the given image.\n *\n * @param {RgbaImageBuffer} imgBuffer Image to transform\n * @returns {RgbaImageBuffer} Transformed image\n */\nexport const horizontalMirror = (\n  imgBuffer\n) => {\n  const width = imgBuffer.width;\n  const height = imgBuffer.height;\n  const resultPixels = new Uint8ClampedArray(\n    width * height * RgbaImageBuffer.NUM_CHANNELS\n  );\n  let currentIndex = 0;\n  let originalImagePixel;\n  for (let j = height - 1; j >= 0; --j) {\n    for (let i = 0; i < width; ++i) {\n      originalImagePixel = imgBuffer.getPixel({x: i, y:j});\n      resultPixels[currentIndex]     = originalImagePixel[0]; // R channel\n      resultPixels[currentIndex + 1] = originalImagePixel[1]; // G channel\n      resultPixels[currentIndex + 2] = originalImagePixel[2]; // B channel\n      resultPixels[currentIndex + 3] = originalImagePixel[3]; // A channel\n      currentIndex += RgbaImageBuffer.NUM_CHANNELS;\n    }\n  }\n\n  return new RgbaImageBuffer(\n    width, \n    height, \n    resultPixels\n  );\n}\n\n/**\n * Applies vertical mirror operation to the given image.\n *\n * @param {RgbaImageBuffer} imgBuffer Image to transform\n * @returns {RgbaImageBuffer} Transformed image\n */\nexport const verticalMirror = (\n  imgBuffer\n) => {\n  const width = imgBuffer.width;\n  const height = imgBuffer.height;\n  const resultPixels = new Uint8ClampedArray(\n    width * height * RgbaImageBuffer.NUM_CHANNELS\n  );\n  let currentIndex = 0;\n  let originalImagePixel;\n  for (let j = 0; j < height; ++j) {\n    for (let i = width - 1; i >= 0; --i) {\n      originalImagePixel = imgBuffer.getPixel({x: i, y:j});\n      resultPixels[currentIndex]     = originalImagePixel[0]; // R channel\n      resultPixels[currentIndex + 1] = originalImagePixel[1]; // G channel\n      resultPixels[currentIndex + 2] = originalImagePixel[2]; // B channel\n      resultPixels[currentIndex + 3] = originalImagePixel[3]; // A channel\n      currentIndex += RgbaImageBuffer.NUM_CHANNELS;\n    }\n  }\n\n  return new RgbaImageBuffer(\n    width, \n    height, \n    resultPixels\n  );\n}","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { verticalMirror } from \"../../lib/ImageProcessing/mirrorOperations\";\n\nclass VerticalMirrorMenuItem extends React.Component {\n  currentImageVerticalMirror = () => {\n    const { appStore, enqueueSnackbar } = this.props;\n    const { type, index } = appStore.selectedGridItem;\n\n    if (type !== \"image\" || index < 0) {\n      enqueueSnackbar(\"You first need to select an image\", {\n        variant: \"warning\"\n      });\n    } else {\n      appStore.addImage(\n        verticalMirror(appStore.imagesInfos[index].imageBuffer)\n      );\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <MenuItem onClick={this.currentImageVerticalMirror}>\n          Vertical Mirror\n        </MenuItem>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withSnackbar(\n  inject(\"appStore\")(observer(VerticalMirrorMenuItem))\n);\n","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { horizontalMirror } from \"../../lib/ImageProcessing/mirrorOperations\";\n\nclass HorizontalMirrorMenuItem extends React.Component {\n  currentImageHorizontalMirror = () => {\n    const { appStore, enqueueSnackbar } = this.props;\n    const { type, index } = appStore.selectedGridItem;\n\n    if (type !== \"image\" || index < 0) {\n      enqueueSnackbar(\"You first need to select an image\", {\n        variant: \"warning\"\n      });\n    } else {\n      appStore.addImage(\n        horizontalMirror(appStore.imagesInfos[index].imageBuffer)\n      );\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <MenuItem onClick={this.currentImageHorizontalMirror}>\n          Horizontal Mirror\n        </MenuItem>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withSnackbar(\n  inject(\"appStore\")(observer(HorizontalMirrorMenuItem))\n);\n","import RgbaImageBuffer from \"../RgbaImageBuffer\";\n\n/**\n * Applies image transpose operation to the given image.\n *\n * @param {RgbaImageBuffer} imgBuffer Image to transform\n * @returns {RgbaImageBuffer} Transformed image\n */\nexport const imageTranspose = (\n  imgBuffer\n) => {\n  const height = imgBuffer.width;\n  const width = imgBuffer.height;\n  const resultPixels = new Uint8ClampedArray(\n    width * height * RgbaImageBuffer.NUM_CHANNELS\n  );\n  let currentIndex = 0;\n  let originalImagePixel;\n  for (let j = 0; j < height; ++j) {\n    for (let i = 0; i < width; ++i) {\n      originalImagePixel = imgBuffer.getPixel({x: j, y:i});\n      resultPixels[currentIndex]     = originalImagePixel[0]; // R channel\n      resultPixels[currentIndex + 1] = originalImagePixel[1]; // G channel\n      resultPixels[currentIndex + 2] = originalImagePixel[2]; // B channel\n      resultPixels[currentIndex + 3] = originalImagePixel[3]; // A channel\n      currentIndex += RgbaImageBuffer.NUM_CHANNELS;\n    }\n  }\n\n  return new RgbaImageBuffer(\n    width, \n    height , \n    resultPixels\n  );\n}","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { imageTranspose } from \"../../lib/ImageProcessing/imageTranspose\";\n\nclass ImageTransposeMenuItem extends React.Component {\n  transposeImage = () => {\n    const { appStore, enqueueSnackbar } = this.props;\n    const { type, index } = appStore.selectedGridItem;\n\n    if (type !== \"image\" || index < 0) {\n      enqueueSnackbar(\"You first need to select an image\", {\n        variant: \"warning\"\n      });\n    } else {\n      appStore.addImage(\n        imageTranspose(appStore.imagesInfos[index].imageBuffer)\n      );\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <MenuItem onClick={this.transposeImage}>Image Transpose</MenuItem>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withSnackbar(\n  inject(\"appStore\")(observer(ImageTransposeMenuItem))\n);\n","import RgbaImageBuffer from \"../RgbaImageBuffer\";\nimport {ImageOperationException} from \"../Exceptions\";\n\n/**\n * Applies resampling operation to the given image\n *\n * @param {RgbaImageBuffer} imgBuffer Image to transform\n * @param {Number} blockWidth Width of the pixels block to resample the image\n * @param {Number} blockHeight Height of the pixels block to resample the image\n * @returns {RgbaImageBuffer} Transformed image\n */\nexport const imageResampling = (\n  imgBuffer,\n  blockWidth,\n  blockHeight\n) => {\n\n  if (blockWidth < 1 || blockWidth > imgBuffer.width)\n    throw new ImageOperationException(\n      \"ImageResamplingException\", \n      \"Invalid block width value, block width should be greater than 0 and less or equal than image width.\"\n    );\n  \n  if (blockHeight < 1 || blockHeight > imgBuffer.height)\n    throw new ImageOperationException(\n      \"ImageResamplingException\", \n      \"Invalid block height value, block height should be greater than 0 and less or equal than image height.\"\n    );\n  \n  const resultPixels = new Uint8ClampedArray(\n    imgBuffer.width * imgBuffer.height * RgbaImageBuffer.NUM_CHANNELS\n  );\n\n  let initialY = 0;\n  let initialX;\n  while (initialY + blockHeight <= imgBuffer.height) {\n    initialX = 0;\n    while(initialX + blockWidth <= imgBuffer.width) {\n      resampleBlock(imgBuffer, resultPixels, initialX, initialY, initialX + blockWidth, initialY + blockHeight);\n      initialX = initialX + blockWidth;\n    }\n    //Residual X\n    resampleBlock(imgBuffer, resultPixels, initialX, initialY, imgBuffer.width, initialY + blockHeight);\n    initialY = initialY + blockHeight;\n  }\n  \n  initialX = 0;\n  while(initialX + blockWidth <= imgBuffer.width) {\n    // Residual Y\n    resampleBlock(imgBuffer, resultPixels, initialX, initialY, initialX + blockWidth, imgBuffer.height);\n    initialX = initialX + blockWidth;\n  }\n  // Residual X and Y\n  resampleBlock(imgBuffer, resultPixels, initialX, initialY, imgBuffer.width, imgBuffer.height);\n\n  return new RgbaImageBuffer(\n    imgBuffer.width, \n    imgBuffer.height, \n    resultPixels\n  );\n}\n\n/**\n * Resamples the given block of the given image\n * \n * @param {RgbaImageBuffer} imgBuffer Image which contains the block \n * @param {Array} pixels Result of resampling the given block\n * @param {Number} initialX X axis position of the upper left corner of the block \n * @param {Number} initialY Y axis position of the upper left corner of the block\n * @param {Number} xLimit X axis position of the lower right corner of the block\n * @param {Number} yLimit Y axis position of the lower right corner of the block\n */\nexport const resampleBlock = (\n  imgBuffer,\n  pixels,\n  initialX,\n  initialY,\n  xLimit,\n  yLimit\n) => {\n  let sum = 0;\n  let count = 0;\n  let newValue;\n  let index;\n  // New value calc\n  for (let y = initialY; y < yLimit; ++y) {\n    for (let x = initialX; x < xLimit; ++x) {\n      sum = sum + imgBuffer.getPixel({x, y})[0];  // R channel\n      count = count + 1;\n    }\n  }\n  newValue = sum / count;\n  // Block resampling\n  for (let y = initialY; y < yLimit; ++y) {\n    for (let x = initialX; x < xLimit; ++x) {\n      index = (y * imgBuffer.width + x) * RgbaImageBuffer.NUM_CHANNELS;\n      pixels[index]     = newValue; // R channel\n      pixels[index + 1] = newValue; // G channel\n      pixels[index + 2] = newValue; // B channel\n      pixels[index + 3] = 255;      // A channel\n    }\n  }\n};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport { isInRange } from \"../../../lib/Checks\";\nimport { imageResampling } from \"../../../lib/ImageProcessing/imageResampling\";\n\nconst styles = {\n  inputsContainer: {\n    flexWrap: \"wrap\",\n    margin: \"1rem\"\n  },\n  input: {\n    margin: \"1rem\"\n  }\n};\n\n/**\n * Dialog to prompt the user for the pixel block width and height\n * on the resample operation\n */\nclass ImageResampleDialog extends React.Component {\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n  };\n\n  state = {\n    blockWidth: 1,\n    blockWidthErrorMessage: \"\",\n    blockHeight: 1,\n    blockHeightErrorMessage: \"\"\n  };\n\n  /** General listener for a change on the block width or height inputs */\n  onChange = (\n    e,\n    valueStateName,\n    errorMessageStateName,\n    minPossibleValue,\n    maxPossibleValue\n  ) => {\n    const value = Number.parseFloat(e.target.value);\n\n    if (!isInRange(value, minPossibleValue, maxPossibleValue + 1)) {\n      this.setState({\n        [valueStateName]: e.target.value,\n        [errorMessageStateName]: `Required a number between ${minPossibleValue} and ${maxPossibleValue}`\n      });\n    } else {\n      this.setState({\n        [valueStateName]: value,\n        [errorMessageStateName]: \"\"\n      });\n    }\n  };\n\n  /** Listener for when the user changes the block width input value */\n  onBlockWidthChange = e => {\n    const { index } = this.props.appStore.selectedGridItem;\n    const { imageBuffer } = this.props.appStore.imagesInfos[index];\n    this.onChange(\n      e,\n      \"blockWidth\",\n      \"blockWidthErrorMessage\",\n      1,\n      imageBuffer.width\n    );\n  };\n\n  /** Listener for when the user changes the block height input value */\n  onBlockHeightChange = e => {\n    const { index } = this.props.appStore.selectedGridItem;\n    const { imageBuffer } = this.props.appStore.imagesInfos[index];\n    this.onChange(\n      e,\n      \"blockHeight\",\n      \"blockHeightErrorMessage\",\n      1,\n      imageBuffer.height\n    );\n  };\n\n  onSubmit = () => {\n    const { blockWidth, blockHeight } = this.state;\n    const { appStore } = this.props;\n    const { index } = appStore.selectedGridItem;\n\n    appStore.addImage(\n      imageResampling(\n        appStore.imagesInfos[index].imageBuffer,\n        blockWidth,\n        blockHeight\n      )\n    );\n    this.props.onClose();\n  };\n\n  render() {\n    return (\n      <Dialog\n        open={this.props.isOpen}\n        onClose={this.props.onClose}\n        scroll=\"body\"\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Image Resample</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please, enter the pixels block width and height\n          </DialogContentText>\n          <div className=\"center\" style={styles.inputsContainer}>\n            <TextField\n              error={!!this.state.blockWidthErrorMessage}\n              label={this.state.blockWidthErrorMessage}\n              type=\"number\"\n              placeholder={String(this.state.blockWidth)}\n              value={this.state.blockWidth}\n              onChange={this.onBlockWidthChange}\n              margin=\"dense\"\n              style={styles.input}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">Width: </InputAdornment>\n                )\n              }}\n            />\n            <TextField\n              error={!!this.state.blockHeightErrorMessage}\n              label={this.state.blockHeightErrorMessage}\n              type=\"number\"\n              placeholder={String(this.state.blockHeight)}\n              value={this.state.blockHeight}\n              onChange={this.onBlockHeightChange}\n              margin=\"dense\"\n              style={styles.input}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">Height: </InputAdornment>\n                )\n              }}\n            />\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.props.onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={this.onSubmit} color=\"primary\">\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nexport default withSnackbar(inject(\"appStore\")(observer(ImageResampleDialog)));\n","import React from \"react\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport ImageResampleDialog from \"./ImageResampleDialog\";\n\nclass ImageResampleMenuItem extends React.Component {\n  state = {\n    isDialogOpen: false\n  };\n\n  openDialog = () => {\n    const { appStore, enqueueSnackbar } = this.props;\n    const { type, index } = appStore.selectedGridItem;\n    if (type !== \"image\" || index < 0) {\n      enqueueSnackbar(\"You first need to select an image\", {\n        variant: \"warning\"\n      });\n    } else {\n      this.setState({ isDialogOpen: true });\n    }\n  };\n\n  closeDialog = () => this.setState({ isDialogOpen: false });\n\n  render() {\n    return (\n      <React.Fragment>\n        <MenuItem onClick={this.openDialog}>Image Resample</MenuItem>\n        <ImageResampleDialog\n          isOpen={this.state.isDialogOpen}\n          onClose={this.closeDialog}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withSnackbar(\n  inject(\"appStore\")(observer(ImageResampleMenuItem))\n);\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport MenuList from \"@material-ui/core/MenuList\";\nimport ImageRotationMenuItem from \"../../ImageProcessingUi/ImageRotationMenuItem\";\nimport ImageResizeMenuItem from \"../../ImageProcessingUi/ImageResizeMenuItem\";\nimport VerticalMirrorMenuItem from \"../../ImageProcessingUi/VerticalMirrorMenuItem\";\nimport HorizontalMirrorMenuItem from \"../../ImageProcessingUi/HorizontalMirrorMenuItem\";\nimport ImageTransposeMenuItem from \"../../ImageProcessingUi/ImageTransposeMenuItem\";\nimport ImageResampleMenuItem from \"../../ImageProcessingUi/ImageResampleMenuItem\";\n\n/**\n * \"Geometric Operations\" Appbar Dropdown menu. Contains all the geometric operations\n * options that the user can choose\n */\nexport default class GeometricOperationsSubmenu extends React.Component {\n  state = {\n    open: false\n  };\n\n  handleToggle = () => {\n    this.setState(state => ({ open: !state.open }));\n  };\n\n  handleClose = event => {\n    if (this.anchorEl.contains(event.target)) {\n      return;\n    }\n    this.setState({ open: false });\n  };\n\n  render() {\n    return (\n      <div>\n        <Button\n          buttonRef={node => {\n            this.anchorEl = node;\n          }}\n          aria-owns={this.state.open ? \"file-menu-list-grow\" : undefined}\n          aria-haspopup=\"true\"\n          onClick={this.handleToggle}\n          color=\"inherit\"\n        >\n          Geometric Operations\n        </Button>\n        <Popper\n          open={this.state.open}\n          style={this.state.open ? {} : { display: \"none\" }}\n          anchorEl={this.anchorEl}\n          transition\n          disablePortal\n        >\n          <Paper onClick={this.handleClose}>\n            <ClickAwayListener onClickAway={this.handleClose}>\n              <MenuList>\n                <ImageRotationMenuItem />\n                <ImageResizeMenuItem />\n                <VerticalMirrorMenuItem />\n                <HorizontalMirrorMenuItem />\n                <ImageTransposeMenuItem />\n                <ImageResampleMenuItem />\n              </MenuList>\n            </ClickAwayListener>\n          </Paper>\n        </Popper>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { observer, inject } from \"mobx-react\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport CropSquareIcon from \"@material-ui/icons/CropSquare\";\nimport EditIcon from \"@material-ui/icons/Edit\";\n\nclass SelectionToolbar extends React.Component {\n  render() {\n    const {\n      imageSelectionMehod,\n      updateImageSelectionMehod\n    } = this.props.appStore;\n\n    return (\n      <Toolbar\n        style={{\n          backgroundColor: \"white\",\n          color: \"#3f51b5\",\n          display: \"flex\",\n          zIndex: \"-1\"\n        }}\n      >\n        <Button\n          style={\n            imageSelectionMehod !== \"selection\"\n              ? { margin: \"0 0.5rem\" }\n              : {\n                  margin: \"0 0.5rem\",\n                  backgroundColor: \"#3f51b5\",\n                  color: \"white\"\n                }\n          }\n          onClick={() => updateImageSelectionMehod(\"selection\")}\n        >\n          <CropSquareIcon style={{ marginRight: \"0.5rem\" }} />\n          Select\n        </Button>\n        <Button\n          style={\n            imageSelectionMehod !== \"line\"\n              ? { margin: \"0 0.5rem\" }\n              : {\n                  margin: \"0 0.5rem\",\n                  backgroundColor: \"#3f51b5\",\n                  color: \"white\"\n                }\n          }\n          onClick={() => updateImageSelectionMehod(\"line\")}\n        >\n          <EditIcon style={{ marginRight: \"0.5rem\" }} />\n          Line\n        </Button>\n      </Toolbar>\n    );\n  }\n}\n\nexport default inject(\"appStore\")(observer(SelectionToolbar));\n","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport FileSubmenu from \"./Submenus/FileSubmenu\";\nimport ImageSubmenu from \"./Submenus/ImageSubmenu\";\nimport PointOperationsSubmenu from \"./Submenus/PointOperationsSubmenu\";\nimport GeometricOperationsSubmenu from \"./Submenus/GeometricOperationsSubmenu\";\nimport SelectionToolbar from \"./SelectionToolbar\";\n\nconst AppToolbar = () => (\n  <AppBar position=\"static\">\n    <Toolbar>\n      <FileSubmenu />\n      <ImageSubmenu />\n      <PointOperationsSubmenu />\n      <GeometricOperationsSubmenu />\n    </Toolbar>\n    <SelectionToolbar />\n  </AppBar>\n);\n\nexport default AppToolbar;\n\n//                 <a className=\"navbar-item\" href=\"https://github.com/carlosdg/ImageProcessor.git\">\n//                     <img alt=\"logo\" src=\"https://i.imgur.com/DckFstm.png\" height=\"50\"/>\n//                 </a>\n","import React from \"react\";\nimport { calculateRect } from \"../../lib/coordinates\";\n\nconst SelectionOverlay = ({ originCoords, endCoords }) => {\n  const position = calculateRect(originCoords, endCoords);\n\n  return (\n    <div\n      style={{\n        width: `${position.right - position.left}px`,\n        height: `${position.bottom - position.top}px`,\n        position: \"absolute\",\n        top: position.top + \"px\",\n        left: position.left + \"px\",\n        right: position.right + \"px\",\n        bottom: position.bottom + \"px\",\n        backgroundColor: \"#99ccff\",\n        border: \"1px solid #0000DD\",\n        opacity: \"0.3\"\n      }}\n    />\n  );\n};\n\nexport default SelectionOverlay;\n","import React from \"react\";\n\n/**\n * Line to show when the user is dragging the mouse over a canvas to\n * select a profile of the image\n */\nconst LineOverlay = ({ originCoords, endCoords }) => (\n  <svg\n    style={{\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    }}\n    height=\"100%\"\n    width=\"100%\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <line\n      stroke=\"#000\"\n      strokeWidth=\"2\"\n      x1={originCoords.x}\n      y1={originCoords.y}\n      x2={endCoords.x}\n      y2={endCoords.y}\n    />\n  </svg>\n);\nexport default LineOverlay;\n","import React, { Component } from \"react\";\nimport \"react-vis/dist/style.css\";\nimport {\n  FlexibleXYPlot,\n  XAxis,\n  YAxis,\n  VerticalGridLines,\n  HorizontalGridLines,\n  LineSeries,\n  Hint\n} from \"react-vis\";\n\nclass ProfileComponent extends Component {\n  state = {\n    emphasizedValue: null,\n    profileVisualizationData: []\n  };\n\n  componentDidMount() {\n    this.setState({\n      profileVisualizationData: this.props.profileValues.map(\n        (value, index) => ({x: index, y: value })\n      )\n    });\n  }\n\n  render() {\n    return (\n      <FlexibleXYPlot\n        margin={{\n          top: 50,\n          left: 70\n        }}\n        onMouseLeave={() => this.setState({ emphasizedValue: null })}\n      >\n        <VerticalGridLines />\n        <HorizontalGridLines />\n        <XAxis />\n        <YAxis />\n        <LineSeries\n          onNearestX={value => this.setState({ emphasizedValue: value })}\n          data={this.state.profileVisualizationData}\n        />\n        {this.state.emphasizedValue ? (\n          <Hint\n            value={this.state.emphasizedValue}\n            align={{ horizontal: \"auto\", vertical: \"top\" }}\n            style={{ fontSize: 14 }}\n            format={dataPoint => {\n              return [\n                {\n                  title: \"Pixel: \" + dataPoint.x,\n                  value: \"Value: \" + dataPoint.y\n                }\n              ];\n            }}\n          />\n        ) : null}\n      </FlexibleXYPlot>\n    );\n  }\n}\n\nexport default ProfileComponent;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport ProfileComponent from \"../ProfileComponent\";\n\n\nexport default class ProfilesComponent extends React.Component {\n  state = {\n    currentTab: 0\n  };\n\n  updateCurrentTab = (_, newTab) => this.setState({ currentTab: newTab });\n\n  render() {\n    const { currentTab } = this.state;\n    const { profileValues, firstDerivativeProfileValues } = this.props.info;\n\n    return (\n      <React.Fragment>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\"\n          }}\n        >\n          <Button\n            style={\n              currentTab === 0\n                ? {\n                    boxShadow: \"0px 4px 6px -5px black\"\n                  }\n                : {}\n            }\n            onClick={e => this.updateCurrentTab(e, 0)}\n          >\n            Profile\n          </Button>\n          <Button\n            style={\n              currentTab === 1\n                ? {\n                    boxShadow: \"0px 4px 6px -5px black\"\n                  }\n                : {}\n            }\n            onClick={e => this.updateCurrentTab(e, 1)}\n          >\n            First Derivative\n          </Button>\n        </div>\n        <div\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n            maxHeight: \"80%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          }}\n        >\n          {currentTab === 0 && (\n            <ProfileComponent\n                profileValues={profileValues}\n            />\n          )}\n          {currentTab === 1 && (\n            <ProfileComponent\n                profileValues={firstDerivativeProfileValues}\n            />\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport InteractiveGrid from \"../InteractiveGrid\";\nimport ImageComponent from \"../ImageComponent\";\nimport HistogramAndInfoComponent from \"../HistogramAndInfoComponent\";\nimport AppToolbar from \"../Toolbar\";\nimport \"./App.css\";\nimport { withSnackbar } from \"notistack\";\nimport { observer, inject } from \"mobx-react\";\nimport SelectionOverlay from \"../Overlays/SelectionOverlay\";\nimport LineOverlay from \"../Overlays/LineOverlay\";\nimport { calculateRect } from \"../../lib/coordinates\";\nimport ProfilesComponent from \"../ProfilesComponent\";\n\nclass App extends Component {\n  /** Callback that updates the pixel value and coordinates currently under the\n   * user's mouse */\n  onMouseMoveOverImage = (pixelCoords, pixelValue) => {\n    this.props.appStore.setCurrentPixel(pixelCoords, pixelValue);\n  };\n\n  /** Returns a callback that updates the region of the asked image info */\n  onImageRegionSelection = index => ({ mouseDownCoords, mouseUpCoords }) => {\n    const { top, left, right, bottom } = calculateRect(\n      mouseDownCoords,\n      mouseUpCoords\n    );\n\n    const newRegion = {\n      top,\n      left,\n      width: right - left,\n      height: bottom - top\n    };\n\n    if (newRegion.width !== 0 && newRegion.height !== 0) {\n      this.props.appStore.updateImageRegion(index, newRegion);\n    }\n  };\n\n  getImageOverlay = () => {\n    switch (this.props.appStore.imageSelectionMehod) {\n      case \"selection\":\n        return ({ originCoords, endCoords }) => (\n          <SelectionOverlay originCoords={originCoords} endCoords={endCoords} />\n        );\n      case \"line\":\n        return ({ originCoords, endCoords }) => (\n          <LineOverlay originCoords={originCoords} endCoords={endCoords} />\n        );\n      default:\n        throw new Error(\n          `Invalid option ${this.props.appStore.imageSelectionMehod}`\n        );\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"app-container\">\n          <AppToolbar />\n          <main className=\"main\">\n            <div className=\"main__wrapper\">{this.getGridComponent()}</div>\n          </main>\n          <footer className=\"footer\">\n            {this.getDisplayForImageDimensions()}\n            {this.getDisplayForPixelUnderMouse()}\n          </footer>\n        </div>\n      </div>\n    );\n  }\n\n  // Methods to keep the render method cleaner\n\n  getGridComponent() {\n    return (\n      <InteractiveGrid.Grid\n        layouts={this.props.appStore.gridLayouts}\n        onLayoutChange={this.props.appStore.updateLayout}\n      >\n        {this.props.appStore.imagesInfos.map((image, index) =>\n          this.getImageGridItem(image, index)\n        )}\n        {this.props.appStore.histogramInfos\n          .map((histogramInfo, index) =>\n            histogramInfo.visible\n              ? this.getHistogramGridItem(histogramInfo, index)\n              : null\n          )\n          .filter(element => element !== null)}\n        {this.props.appStore.profilesInfos.map((profile, index) =>\n          this.getProfileGridItem(profile, index)\n        )}\n      </InteractiveGrid.Grid>\n    );\n  }\n\n  getImageGridItem({ imageBuffer, key }, index) {\n    return (\n      <InteractiveGrid.Item\n        key={key}\n        id={index}\n        name={key}\n        onDelete={this.props.appStore.removeImageInfo}\n        onSelect={() => this.props.appStore.updateSelectedImageItem(index)}\n        isSelected={this.props.appStore.isGridItemSelected(\"image\", index)}\n      >\n        <div className=\"center\">\n          <div className=\"scrollable\">\n            <ImageComponent\n              rgbaImage={imageBuffer}\n              onMouseMove={this.onMouseMoveOverImage}\n              onSelection={this.onImageRegionSelection(index)}\n            >\n              {this.getImageOverlay()}\n            </ImageComponent>\n          </div>\n        </div>\n      </InteractiveGrid.Item>\n    );\n  }\n\n  getHistogramGridItem({ histogram, cHistogram, key }, index) {\n    return (\n      <InteractiveGrid.Item\n        key={key}\n        id={index}\n        name={key}\n        onDelete={this.props.appStore.hideHistogram}\n        onSelect={() => this.props.appStore.updateSelectedHistogramItem(index)}\n        isSelected={this.props.appStore.isGridItemSelected(\"histogram\", index)}\n      >\n        <HistogramAndInfoComponent\n          histogram={histogram}\n          cHistogram={cHistogram}\n        />\n      </InteractiveGrid.Item>\n    );\n  }\n\n  getProfileGridItem(profileInfo, index) {\n    return (\n      <InteractiveGrid.Item\n        key={profileInfo.key}\n        id={index}\n        name={profileInfo.key}\n        onDelete={this.props.appStore.removeProfile}\n        onSelect={() => this.props.appStore.updateSelectedProfileItem(index)}\n        isSelected={this.props.appStore.isGridItemSelected(\"line\", index)}\n      >\n        <ProfilesComponent info={profileInfo} />\n      </InteractiveGrid.Item>\n    );\n  }\n\n  getDisplayForImageDimensions() {\n    const {\n      pixelValue,\n      selectedGridItem,\n      imagesInfos,\n      imageSelectionMehod\n    } = this.props.appStore;\n    const { type, index } = selectedGridItem;\n\n    if (type !== \"image\" || !imagesInfos[index]) return;\n\n    const currentPixelRgbaValue = `rgba(${pixelValue.join(\", \")})`;\n    const sizeText =\n      imageSelectionMehod === \"selection\"\n        ? \"width: \" +\n          imagesInfos[index].region.width +\n          \", height: \" +\n          imagesInfos[index].region.height\n        : \"width: \" +\n          imagesInfos[index].imageBuffer.width +\n          \", height: \" +\n          imagesInfos[index].imageBuffer.height;\n\n    return (\n      <div\n        style={{\n          display: \"inline-block\",\n          margin: \"0.5rem\",\n          padding: \"0.5rem\",\n          borderRadius: \"5px\",\n          border: `1px solid ${currentPixelRgbaValue}`,\n          boxShadow: `0 3px 10px -3px ${currentPixelRgbaValue}`\n        }}\n      >\n        {sizeText}\n      </div>\n    );\n  }\n\n  getDisplayForPixelUnderMouse() {\n    const { pixelValue, pixelCoords } = this.props.appStore;\n\n    const currentPixelRgbaValue = `rgba(${pixelValue.join(\", \")})`;\n    return (\n      <div\n        style={{\n          display: \"inline-block\",\n          margin: \"0.5rem\",\n          padding: \"0.5rem\",\n          borderRadius: \"5px\",\n          border: `1px solid ${currentPixelRgbaValue}`,\n          boxShadow: `0 3px 10px -3px ${currentPixelRgbaValue}`\n        }}\n      >\n        x: {pixelCoords.x}, y: {pixelCoords.y},\n        <span\n          style={{\n            display: \"inline-block\",\n            width: \"0.5rem\",\n            height: \"0.5rem\",\n            margin: \"0 0.5rem\",\n            backgroundColor: currentPixelRgbaValue,\n            border: \"1px solid black\",\n            borderRadius: \"2px\"\n          }}\n        />\n        {currentPixelRgbaValue}\n      </div>\n    );\n  }\n}\n\nexport default withSnackbar(inject(\"appStore\")(observer(App)));\n","import RgbaImageBuffer from \"../lib/RgbaImageBuffer\";\n\n/**\n * Class to represent an image histogram. Each image has associated histograms\n * which describes the way that its pixels values are distributed.\n *\n * An object of this class wraps the values of the histogram besides some useful\n * information.\n */\nexport default class Histogram {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {RgbaImageBuffer} imagePixels Image Buffer to create the histogram\n   * for\n   */\n  constructor(imagePixels) {\n    this.setImagePixels(imagePixels.pixels);\n  }\n\n  /**\n   * Sets the pixels values of the associated image and extracts histogram\n   * values and useful information.\n   */\n  setImagePixels(imagePixels) {\n    this.histogramValues = new Array(256).fill(0);\n    for (let i = 0; i < imagePixels.length; i += RgbaImageBuffer.NUM_CHANNELS) {\n      if (imagePixels[i + 3] === 0) {\n        // The transparent pixels are ignored\n        continue;\n      }\n      this.histogramValues[imagePixels[i]]++;\n    }\n\n    this.histogramInfo = {};\n    this.histogramInfo.count = this.histogramValues.reduce(\n      (previousValue, currentElement) => previousValue + currentElement,\n      0\n    );\n\n    this.histogramInfo.mean =\n      this.histogramValues.reduce(\n        (previousValue, currentElement, index) =>\n          previousValue + currentElement * index,\n        0\n      ) / this.histogramInfo.count;\n\n    this.histogramInfo.stdDev = Math.sqrt(\n      this.histogramValues.reduce(\n        (previousValue, currentElement, index) =>\n          previousValue +\n          Math.pow(index - this.histogramInfo.mean, 2) * currentElement,\n        0\n      ) / this.histogramInfo.count\n    );\n\n    for (let i = 0; i < this.histogramValues.length; ++i) {\n      if (this.histogramValues[i] !== 0) {\n        this.histogramInfo.minValue = i;\n        break;\n      }\n    }\n\n    for (let i = this.histogramValues.length - 1; i >= 0; --i) {\n      if (this.histogramValues[i] !== 0) {\n        this.histogramInfo.maxValue = i;\n        break;\n      }\n    }\n\n    let maxIndex = 0;\n    let maxCount = 0;\n    this.histogramValues.forEach((count, value) => {\n      if (count > maxCount) {\n        maxCount = count;\n        maxIndex = value;\n      }\n    });\n\n    this.histogramInfo.mode = {};\n    this.histogramInfo.mode.value = maxIndex;\n    this.histogramInfo.mode.count = maxCount;\n\n    let entropy = 0;\n    let probability;\n    for (let i = 0; i < 256; ++i) {\n      probability = this.histogramValues[i] / this.histogramInfo.count;\n      if (probability > 0) {\n        entropy += probability * Math.log2(probability);\n      }\n    }\n    if (entropy !== 0)\n      entropy *= -1;\n\n    this.histogramInfo.entropy = entropy.toFixed(3);\n  }\n}\n","/**\n * Class to represent an image cumulative histogram.\n */\nexport default class CumulativeHistogram {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Array} histogram Array of values of the histogram to create the\n   * cumulative from\n   */\n  constructor(histogram) {\n    let count = 0;\n\n    this.counts = histogram.map(value => {\n      count += value;\n      return count;\n    });\n    this.count = count;\n  }\n}\n","import GRID_PROPERTIES from \"./gridProperties\";\n\n/**\n * Returns an emoty object of layouts for different viewport sizes, as defined\n * in GRID_PROPERTIES.\n */\nconst createNewSetOfLayouts = () => {\n  const layouts = {};\n\n  Object.keys(GRID_PROPERTIES.GRID_COLUMNS).forEach(\n    layoutName => (layouts[layoutName] = [])\n  );\n\n  return layouts;\n};\n\n/**\n * Returns an object defining the default information for being part of a grid\n * layout\n */\nconst createNewElementLayoutInfo = id => ({\n  i: id,\n  x: 0,\n  y: Infinity,\n  w: GRID_PROPERTIES.DEFAULT_GRID_ITEM_COLS,\n  h: GRID_PROPERTIES.DEFAULT_GRID_ITEM_ROWS,\n  minW: GRID_PROPERTIES.DEFAULT_GRID_ITEM_COLS,\n  minH: GRID_PROPERTIES.DEFAULT_GRID_ITEM_ROWS\n});\n\n/**\n * Returns a new set set of layouts resulting from adding a default layout\n * information for the new elements with the given IDs\n *\n * @param {Object} currentLayouts Layouts object to where the new element\n * information is going to be added\n * @param {Array<String | number>} newElementsIds IDs of the elements to add to\n * the layout\n */\nconst addNewElementsToLayouts = (currentLayouts, newElementsIds) => {\n  const newElementsLayoutInfos = newElementsIds.map(createNewElementLayoutInfo);\n  const newLayouts = createNewSetOfLayouts();\n\n  Object.keys(currentLayouts).forEach(layoutName => {\n    newLayouts[layoutName] = currentLayouts[layoutName].concat(\n      newElementsLayoutInfos\n    );\n  });\n\n  return newLayouts;\n};\n\n/**\n * Returns a new set of layouts without the elements with the given IDs\n *\n * @param {Object} currentLayouts Layouts object\n * @param {Array<String | number>} ids IDs of the elements to remove\n */\nconst removeElementsFromLayout = (currentLayouts, ids) => {\n  const newLayouts = {};\n\n  Object.keys(currentLayouts).forEach(layoutName => {\n    newLayouts[layoutName] = currentLayouts[layoutName].filter(\n      ({ i }) => !ids.includes(i)\n    );\n  });\n\n  return newLayouts;\n};\n\nexport {\n  createNewSetOfLayouts,\n  addNewElementsToLayouts,\n  removeElementsFromLayout\n};\n","import { observable, action, decorate } from \"mobx\";\nimport Histogram from \"../lib/Histogram\";\nimport CumulativeHistogram from \"../lib/CumulativeHistogram\";\nimport * as GridLayoutHelper from \"../lib/grid/calculateLayout\";\n\nclass AppStoreSingleton {\n  /** All the information relative to the images loaded */\n  imagesInfos = [];\n  /** All the information relative to the histograms of each image */\n  histogramInfos = [];\n  /** All the information relative to the profiles  */\n  profilesInfos = [];\n  /** Grid layouts for the elements on screen */\n  gridLayouts = GridLayoutHelper.createNewSetOfLayouts();\n  /** Indicates the current method for selecting a part of the image */\n  imageSelectionMehod = \"selection\";\n  /** Information of the current grid item being selected (item type & index) */\n  selectedGridItem = { type: \"\", index: -1 };\n  /** Coordenates of the pixel that was last being pointed by the mouse */\n  pixelCoords = { x: 0, y: 0 };\n  /** Value of the pixel that was last being pointed by the mouse */\n  pixelValue = [0, 0, 0, 255];\n  /** Amount of removed images, needed for proper indexing images on the grid */\n  _removedImagesCount = 0;\n  /** Amount of added profiles, needed for proper indexing profiles on the grid */\n  _profilesCount = 0;\n\n  addImage = imageBuffer => {\n    const imageSection = {\n      top: 0,\n      left: 0,\n      width: imageBuffer.width,\n      height: imageBuffer.height\n    };\n    const histogram = new Histogram(imageBuffer);\n    const cHistogram = new CumulativeHistogram(histogram.histogramValues);\n    const imageKey = `Image ${this.imagesInfos.length +\n      this._removedImagesCount}`;\n    const histogramKey = `Histogram ${this.histogramInfos.length +\n      this._removedImagesCount}`;\n\n    this.imagesInfos.push({ key: imageKey, imageBuffer, region: imageSection });\n\n    this.histogramInfos.push({\n      key: histogramKey,\n      histogram,\n      cHistogram,\n      visible: false\n    });\n\n    this.gridLayouts = GridLayoutHelper.addNewElementsToLayouts(\n      this.gridLayouts,\n      [imageKey]\n    );\n  };\n\n  addProfile = (profileValues, firstDerivativeProfileValues) => {\n    const profileKey = `Profile ${this._profilesCount}`;\n    this._profilesCount = this._profilesCount + 1;\n\n    const firstDerivativeKey = \"First derivative of \" + profileKey;\n\n    this.profilesInfos.push({\n      key: profileKey,\n      profileValues,\n      firstDerivativeProfileValues\n    });\n\n    this.gridLayouts = GridLayoutHelper.addNewElementsToLayouts(\n      this.gridLayouts,\n      [profileKey, firstDerivativeKey]\n    );\n  };\n\n  removeImageInfo = index => {\n    const newLayouts = GridLayoutHelper.removeElementsFromLayout(\n      this.gridLayouts,\n      [this.histogramInfos[index].key, this.imagesInfos[index].key]\n    );\n    let newSelectedItem = { ...this.selectedGridItem };\n\n    // We are removing an element from an array, we have to update the\n    // selected item index if it is the element removed or after it\n    if (index <= newSelectedItem.index) {\n      newSelectedItem.index -= 1;\n      if (newSelectedItem.index < 0) {\n        newSelectedItem.type = \"\";\n      }\n    }\n\n    this.histogramInfos = this.histogramInfos.filter((_, i) => i !== index);\n    this.imagesInfos = this.imagesInfos.filter((_, i) => i !== index);\n    this.gridLayouts = newLayouts;\n    this.selectedGridItem = newSelectedItem;\n    this._removedImagesCount = this._removedImagesCount + 1;\n  };\n\n  updateImageRegion = (index, newRegion) =>\n    (this.imagesInfos[index].region = newRegion);\n\n  /** Hides the given histogram from the view */\n  hideHistogram = index => {\n    // Set the visibility to false, remove its layout information and resets the\n    // current selected item if it was the histogram to hide\n    this.histogramInfos[index].visible = false;\n    this.gridLayouts = GridLayoutHelper.removeElementsFromLayout(\n      this.gridLayouts,\n      [this.histogramInfos[index].key]\n    );\n    if (this.isGridItemSelected(\"histogram\", index)) {\n      this.selectedGridItem = { type: \"\", index: -1 };\n    }\n  };\n\n  removeProfile = index => {\n    const newLayouts = GridLayoutHelper.removeElementsFromLayout(\n      this.gridLayouts,\n      [this.profilesInfos[index].key]\n    );\n    let newSelectedItem = { ...this.selectedGridItem };\n\n    if (index <= newSelectedItem.index) {\n      newSelectedItem.index -= 1;\n      if (newSelectedItem.index < 0) {\n        newSelectedItem.type = \"\";\n      }\n    }\n\n    this.profilesInfos = this.profilesInfos.filter((_, i) => i !== index);\n    this.gridLayouts = newLayouts;\n    this.selectedGridItem = newSelectedItem;\n  };\n\n  showHistogramOfCurrentImage = () => {\n    const { type, index } = this.selectedGridItem;\n\n    if (type === \"image\") {\n      this.histogramInfos[index].visible = true;\n\n      this.gridLayouts = GridLayoutHelper.addNewElementsToLayouts(\n        this.gridLayouts,\n        [this.histogramInfos[index].key]\n      );\n    }\n  };\n\n  updateLayout = (_, newLayouts) =>\n    requestAnimationFrame(() => (this.gridLayouts = newLayouts));\n\n  updateSelectedImageItem = index =>\n    (this.selectedGridItem = { type: \"image\", index });\n\n  updateSelectedHistogramItem = index =>\n    (this.selectedGridItem = { type: \"histogram\", index });\n\n  updateSelectedProfileItem = index =>\n    (this.selectedGridItem = { type: \"line\", index });\n\n  setCurrentPixel = (coords, value) => {\n    this.pixelCoords = coords;\n    this.pixelValue = value;\n  };\n\n  updateImageSelectionMehod = newMethodType => {\n    this.imageSelectionMehod = newMethodType;\n  };\n\n  isGridItemSelected = (type, index) =>\n    this.selectedGridItem.index === index &&\n    this.selectedGridItem.type === type;\n}\n\ndecorate(AppStoreSingleton, {\n  imagesInfos: observable,\n  histogramInfos: observable,\n  profilesInfos: observable,\n  gridLayouts: observable,\n  imageSelectionMehod: observable,\n  selectedGridItem: observable,\n  pixelCoords: observable,\n  pixelValue: observable,\n  addImage: action,\n  addProfile: action,\n  removeImageInfo: action,\n  updateImageRegion: action,\n  hideHistogram: action,\n  removeProfile: action,\n  showHistogramOfCurrentImage: action,\n  updateLayout: action,\n  updateSelectedImageItem: action,\n  updateSelectedHistogramItem: action,\n  updateSelectedProfileItem: action,\n  setCurrentPixel: action,\n  updateImageSelectionMehod: action\n});\n\nexport default new AppStoreSingleton();\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\n\n// react-grid-layout CSS classes\nimport \"../node_modules/react-grid-layout/css/styles.css\";\nimport \"../node_modules/react-resizable/css/styles.css\";\n\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport { SnackbarProvider } from \"notistack\";\nimport Button from \"@material-ui/core/Button\";\nimport { Provider } from \"mobx-react\";\nimport appStore from \"./stores/appStore\";\n\n// Material UI color theme\nconst theme = createMuiTheme({\n  palette: {\n    common: { black: \"#000\", white: \"#fff\" },\n    background: { paper: \"#fff\", default: \"#fafafa\" },\n    primary: {\n      light: \"#7986cb\",\n      main: \"#3f51b5\",\n      dark: \"#303f9f\",\n      contrastText: \"#fff\"\n    },\n    secondary: {\n      light: \"#ff4081\",\n      main: \"#f50057\",\n      dark: \"#c51162\",\n      contrastText: \"#fff\"\n    },\n    error: {\n      light: \"#e57373\",\n      main: \"#f44336\",\n      dark: \"#d32f2f\",\n      contrastText: \"#fff\"\n    },\n    text: {\n      primary: \"rgba(0, 0, 0, 0.87)\",\n      secondary: \"rgba(0, 0, 0, 0.54)\",\n      disabled: \"rgba(0, 0, 0, 0.38)\",\n      hint: \"rgba(0, 0, 0, 0.38)\"\n    }\n  },\n  typography: {\n    useNextVariants: true\n  }\n});\n\nReactDOM.render(\n  <div>\n    <MuiThemeProvider theme={theme}>\n      <SnackbarProvider\n        maxSnack={5}\n        anchorOrigin={{\n          vertical: \"top\",\n          horizontal: \"right\"\n        }}\n        action={[\n          <Button color=\"inherit\" size=\"small\" key={Date.now()}>\n            Dismiss\n          </Button>\n        ]}\n      >\n        <Provider appStore={appStore}>\n          <App />\n        </Provider>\n      </SnackbarProvider>\n    </MuiThemeProvider>\n  </div>,\n  document.getElementById(\"root\")\n);\n","/** \n * Returns the light value of the closest pixel of the given coordinates.\n * It retrieves the third element of the pixel assuming that no matters what\n * RGB channel you choose for grayscale images and in case of operate with\n * colored images (HSL), the third channel corresponds with the Lightness.\n */\nconst closestNeighbourInterpolation = (xCoord, yCoord, imgBuffer) =>\n    imgBuffer.getPixel({x: Math.round(xCoord), y: Math.round(yCoord)})[2];\n\n\n/** \n * Returns the light value of the given coordinates assuming that the light\n * values of the closest pixels vary linearly.\n * It retrieves the third elements of the pixels assuming that no matters what\n * RGB channel you choose for grayscale images and in case of operate with\n * colored images (HSL), the third channel corresponds with the Lightness.\n */\nconst bilinearInterpolation = (xCoord, yCoord, imgBuffer) => {\n    const A = imgBuffer.getPixel({x: Math.floor(xCoord), y: Math.ceil(yCoord)})[2];\n    const B = imgBuffer.getPixel({x: Math.ceil(xCoord), y: Math.ceil(yCoord)})[2];\n    const C = imgBuffer.getPixel({x: Math.floor(xCoord), y: Math.floor(yCoord)})[2];\n    const D = imgBuffer.getPixel({x: Math.ceil(xCoord), y: Math.floor(yCoord)})[2];\n    const p = xCoord - Math.floor(xCoord);\n    const q = yCoord - Math.floor(yCoord);\n\n\n    return C + ((D - C) * p) + ((A - C) * q) + ((B + C - A - D) * p * q);\n};\n\nmodule.exports = {\n    \"Bilinear\": bilinearInterpolation,\n    \"Closest Neighbour\": closestNeighbourInterpolation\n};"],"sourceRoot":""}